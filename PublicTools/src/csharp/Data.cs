// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpkYXRhLnByb3RvEgVQcm90bxoLY29uc3QucHJvdG8aEGV4Y2VsY29uc3Qu",
            "cHJvdG8iKgoHVmVjdG9yMxIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgD",
            "IAEoAiJXCg5HYW1lU2VydmVySW5mbxIMCgRIb3N0GAEgASgJEgwKBFBvcnQY",
            "AiABKAUSEAoIU2VydmVySUQYAyABKAUSFwoPTWF4U2VydmljZUNvdW50GAQg",
            "ASgFIk0KCVdlYXJFcXVpcBIOCgZJdGVtSUQYASABKAUSDAoER1VJRBgCIAEo",
            "CRIiCgRQYXJ0GAMgASgOMhQuUHJvdG8uRXF1aXBtZW50VHlwZSIsCglIZXJv",
            "TWFnaWMSEAoITWFnaWNLZXkYASABKAUSDQoFTGV2ZWwYAiABKAUifAoFREhl",
            "cm8SDgoGSGVyb0lEGAEgASgFEg0KBUxldmVsGAIgASgFEhAKCEV4cHJpY2Vz",
            "GAMgASgFEiAKBkVxdWlwcxgEIAMoCzIQLlByb3RvLldlYXJFcXVpcBIgCgZN",
            "YWdpY3MYBSADKAsyEC5Qcm90by5IZXJvTWFnaWMiSQoNRXF1aXBQcm9wZXJ0",
            "eRIpCghQcm9wZXJ0eRgBIAEoDjIXLlByb3RvLkhlcm9Qcm9wZXJ0eVR5cGUS",
            "DQoFVmFsdWUYAiABKAUiVgoKUGxheWVySXRlbRIOCgZJdGVtSUQYASABKAUS",
            "CwoDTnVtGAIgASgFEgwKBEdVSUQYAyABKAkSDgoGTG9ja2VkGAQgASgIEg0K",
            "BUxldmVsGAUgASgFIkIKDVBsYXllclBhY2thZ2USIAoFSXRlbXMYASADKAsy",
            "ES5Qcm90by5QbGF5ZXJJdGVtEg8KB01heFNpemUYAiABKAUiYwoQUGxheWVy",
            "U2VydmVySW5mbxITCgtBY2NvdW50VXVpZBgBIAEoCRIQCghTZXJ2ZXJJRBgC",
            "IAEoBRITCgtTZXJ2aWNlUG9ydBgDIAEoBRITCgtTZXJ2aWNlSG9zdBgEIAEo",
            "CSJICgxIZXJvUHJvcGVydHkSKQoIUHJvcGVydHkYASABKA4yFy5Qcm90by5I",
            "ZXJvUHJvcGVydHlUeXBlEg0KBVZhbHVlGAIgASgFIj4KB01hcE5vZGUSCQoB",
            "WBgBIAEoBRIJCgFZGAIgASgFEgkKAVoYAyABKAUSEgoKSXNXYWxrYWJsZRgE",
            "IAEoCCJBCg9NYXBNb25zdGVyR3JvdXASGwoDUG9zGAEgASgLMg4uUHJvdG8u",
            "TWFwTm9kZRIRCglDYW5CZUJvc3MYAiABKAgi3AEKC01hcEdyaWREYXRhEgwK",
            "BE1heFgYASABKAUSDAoETWF4WRgCIAEoBRIMCgRNYXhaGAMgASgFEh4KBk9m",
            "ZnNldBgEIAEoCzIOLlByb3RvLlZlY3RvcjMSHAoEU2l6ZRgFIAEoCzIOLlBy",
            "b3RvLlZlY3RvcjMSHQoFTm9kZXMYBiADKAsyDi5Qcm90by5NYXBOb2RlEigK",
            "CE1vbnN0ZXJzGAcgAygLMhYuUHJvdG8uTWFwTW9uc3Rlckdyb3VwEhwKBEJv",
            "cm4YCCABKAsyDi5Qcm90by5NYXBOb2RlIjAKDUhlcm9NYWdpY0RhdGESDgoG",
            "Q0RUaW1lGAEgASgCEg8KB01hZ2ljSUQYAiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.ConstReflection.Descriptor, global::Proto.ExcelconstReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Vector3), global::Proto.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.GameServerInfo), global::Proto.GameServerInfo.Parser, new[]{ "Host", "Port", "ServerID", "MaxServiceCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.WearEquip), global::Proto.WearEquip.Parser, new[]{ "ItemID", "GUID", "Part" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.HeroMagic), global::Proto.HeroMagic.Parser, new[]{ "MagicKey", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.DHero), global::Proto.DHero.Parser, new[]{ "HeroID", "Level", "Exprices", "Equips", "Magics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.EquipProperty), global::Proto.EquipProperty.Parser, new[]{ "Property", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PlayerItem), global::Proto.PlayerItem.Parser, new[]{ "ItemID", "Num", "GUID", "Locked", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PlayerPackage), global::Proto.PlayerPackage.Parser, new[]{ "Items", "MaxSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PlayerServerInfo), global::Proto.PlayerServerInfo.Parser, new[]{ "AccountUuid", "ServerID", "ServicePort", "ServiceHost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.HeroProperty), global::Proto.HeroProperty.Parser, new[]{ "Property", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MapNode), global::Proto.MapNode.Parser, new[]{ "X", "Y", "Z", "IsWalkable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MapMonsterGroup), global::Proto.MapMonsterGroup.Parser, new[]{ "Pos", "CanBeBoss" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MapGridData), global::Proto.MapGridData.Parser, new[]{ "MaxX", "MaxY", "MaxZ", "Offset", "Size", "Nodes", "Monsters", "Born" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.HeroMagicData), global::Proto.HeroMagicData.Parser, new[]{ "CDTime", "MagicID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器信息
  /// </summary>
  public sealed partial class GameServerInfo : pb::IMessage<GameServerInfo> {
    private static readonly pb::MessageParser<GameServerInfo> _parser = new pb::MessageParser<GameServerInfo>(() => new GameServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfo(GameServerInfo other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      serverID_ = other.serverID_;
      maxServiceCount_ = other.maxServiceCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfo Clone() {
      return new GameServerInfo(this);
    }

    /// <summary>Field number for the "Host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    /// <summary>
    ///主机地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    /// <summary>
    ///主机端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 3;
    private int serverID_;
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "MaxServiceCount" field.</summary>
    public const int MaxServiceCountFieldNumber = 4;
    private int maxServiceCount_;
    /// <summary>
    ///最大服务数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxServiceCount {
      get { return maxServiceCount_; }
      set {
        maxServiceCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (ServerID != other.ServerID) return false;
      if (MaxServiceCount != other.MaxServiceCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ServerID != 0) hash ^= ServerID.GetHashCode();
      if (MaxServiceCount != 0) hash ^= MaxServiceCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (ServerID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServerID);
      }
      if (MaxServiceCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxServiceCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
      }
      if (MaxServiceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxServiceCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ServerID != 0) {
        ServerID = other.ServerID;
      }
      if (other.MaxServiceCount != 0) {
        MaxServiceCount = other.MaxServiceCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 24: {
            ServerID = input.ReadInt32();
            break;
          }
          case 32: {
            MaxServiceCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WearEquip : pb::IMessage<WearEquip> {
    private static readonly pb::MessageParser<WearEquip> _parser = new pb::MessageParser<WearEquip>(() => new WearEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WearEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WearEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WearEquip(WearEquip other) : this() {
      itemID_ = other.itemID_;
      gUID_ = other.gUID_;
      part_ = other.part_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WearEquip Clone() {
      return new WearEquip(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "GUID" field.</summary>
    public const int GUIDFieldNumber = 2;
    private string gUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GUID {
      get { return gUID_; }
      set {
        gUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Part" field.</summary>
    public const int PartFieldNumber = 3;
    private global::Proto.EquipmentType part_ = 0;
    /// <summary>
    ///部位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.EquipmentType Part {
      get { return part_; }
      set {
        part_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WearEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WearEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (GUID != other.GUID) return false;
      if (Part != other.Part) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (GUID.Length != 0) hash ^= GUID.GetHashCode();
      if (Part != 0) hash ^= Part.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (GUID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GUID);
      }
      if (Part != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Part);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (GUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GUID);
      }
      if (Part != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Part);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WearEquip other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.GUID.Length != 0) {
        GUID = other.GUID;
      }
      if (other.Part != 0) {
        Part = other.Part;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 18: {
            GUID = input.ReadString();
            break;
          }
          case 24: {
            Part = (global::Proto.EquipmentType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroMagic : pb::IMessage<HeroMagic> {
    private static readonly pb::MessageParser<HeroMagic> _parser = new pb::MessageParser<HeroMagic>(() => new HeroMagic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroMagic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagic(HeroMagic other) : this() {
      magicKey_ = other.magicKey_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagic Clone() {
      return new HeroMagic(this);
    }

    /// <summary>Field number for the "MagicKey" field.</summary>
    public const int MagicKeyFieldNumber = 1;
    private int magicKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicKey {
      get { return magicKey_; }
      set {
        magicKey_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroMagic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroMagic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MagicKey != other.MagicKey) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MagicKey != 0) hash ^= MagicKey.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MagicKey != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MagicKey);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MagicKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicKey);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroMagic other) {
      if (other == null) {
        return;
      }
      if (other.MagicKey != 0) {
        MagicKey = other.MagicKey;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MagicKey = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家角色
  /// </summary>
  public sealed partial class DHero : pb::IMessage<DHero> {
    private static readonly pb::MessageParser<DHero> _parser = new pb::MessageParser<DHero>(() => new DHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DHero(DHero other) : this() {
      heroID_ = other.heroID_;
      level_ = other.level_;
      exprices_ = other.exprices_;
      equips_ = other.equips_.Clone();
      magics_ = other.magics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DHero Clone() {
      return new DHero(this);
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 1;
    private int heroID_;
    /// <summary>
    ///配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///当前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exprices" field.</summary>
    public const int ExpricesFieldNumber = 3;
    private int exprices_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exprices {
      get { return exprices_; }
      set {
        exprices_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto.WearEquip> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(34, global::Proto.WearEquip.Parser);
    private readonly pbc::RepeatedField<global::Proto.WearEquip> equips_ = new pbc::RepeatedField<global::Proto.WearEquip>();
    /// <summary>
    ///当前穿戴装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.WearEquip> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "Magics" field.</summary>
    public const int MagicsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.HeroMagic> _repeated_magics_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.HeroMagic.Parser);
    private readonly pbc::RepeatedField<global::Proto.HeroMagic> magics_ = new pbc::RepeatedField<global::Proto.HeroMagic>();
    /// <summary>
    ///英雄当前激活魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.HeroMagic> Magics {
      get { return magics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroID != other.HeroID) return false;
      if (Level != other.Level) return false;
      if (Exprices != other.Exprices) return false;
      if(!equips_.Equals(other.equips_)) return false;
      if(!magics_.Equals(other.magics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroID != 0) hash ^= HeroID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exprices != 0) hash ^= Exprices.GetHashCode();
      hash ^= equips_.GetHashCode();
      hash ^= magics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Exprices != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exprices);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
      magics_.WriteTo(output, _repeated_magics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exprices != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exprices);
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      size += magics_.CalculateSize(_repeated_magics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DHero other) {
      if (other == null) {
        return;
      }
      if (other.HeroID != 0) {
        HeroID = other.HeroID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exprices != 0) {
        Exprices = other.Exprices;
      }
      equips_.Add(other.equips_);
      magics_.Add(other.magics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Exprices = input.ReadInt32();
            break;
          }
          case 34: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 42: {
            magics_.AddEntriesFrom(input, _repeated_magics_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备属性
  /// </summary>
  public sealed partial class EquipProperty : pb::IMessage<EquipProperty> {
    private static readonly pb::MessageParser<EquipProperty> _parser = new pb::MessageParser<EquipProperty>(() => new EquipProperty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipProperty(EquipProperty other) : this() {
      property_ = other.property_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipProperty Clone() {
      return new EquipProperty(this);
    }

    /// <summary>Field number for the "Property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Proto.HeroPropertyType property_ = 0;
    /// <summary>
    ///属性类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.HeroPropertyType Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ///属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property != 0) hash ^= Property.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Property != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Property);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Property);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipProperty other) {
      if (other == null) {
        return;
      }
      if (other.Property != 0) {
        Property = other.Property;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Property = (global::Proto.HeroPropertyType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家道具
  /// </summary>
  public sealed partial class PlayerItem : pb::IMessage<PlayerItem> {
    private static readonly pb::MessageParser<PlayerItem> _parser = new pb::MessageParser<PlayerItem>(() => new PlayerItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerItem(PlayerItem other) : this() {
      itemID_ = other.itemID_;
      num_ = other.num_;
      gUID_ = other.gUID_;
      locked_ = other.locked_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerItem Clone() {
      return new PlayerItem(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    ///配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///拥有数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "GUID" field.</summary>
    public const int GUIDFieldNumber = 3;
    private string gUID_ = "";
    /// <summary>
    ///唯一识别码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GUID {
      get { return gUID_; }
      set {
        gUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Locked" field.</summary>
    public const int LockedFieldNumber = 4;
    private bool locked_;
    /// <summary>
    ///是否锁定中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Locked {
      get { return locked_; }
      set {
        locked_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    ///等级 装备特有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (Num != other.Num) return false;
      if (GUID != other.GUID) return false;
      if (Locked != other.Locked) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (GUID.Length != 0) hash ^= GUID.GetHashCode();
      if (Locked != false) hash ^= Locked.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (GUID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GUID);
      }
      if (Locked != false) {
        output.WriteRawTag(32);
        output.WriteBool(Locked);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (GUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GUID);
      }
      if (Locked != false) {
        size += 1 + 1;
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.GUID.Length != 0) {
        GUID = other.GUID;
      }
      if (other.Locked != false) {
        Locked = other.Locked;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 26: {
            GUID = input.ReadString();
            break;
          }
          case 32: {
            Locked = input.ReadBool();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家背包
  /// </summary>
  public sealed partial class PlayerPackage : pb::IMessage<PlayerPackage> {
    private static readonly pb::MessageParser<PlayerPackage> _parser = new pb::MessageParser<PlayerPackage>(() => new PlayerPackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPackage(PlayerPackage other) : this() {
      items_ = other.items_.Clone();
      maxSize_ = other.maxSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPackage Clone() {
      return new PlayerPackage(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.PlayerItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.PlayerItem.Parser);
    private readonly pbc::RepeatedField<global::Proto.PlayerItem> items_ = new pbc::RepeatedField<global::Proto.PlayerItem>();
    /// <summary>
    ///道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PlayerItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "MaxSize" field.</summary>
    public const int MaxSizeFieldNumber = 2;
    private int maxSize_;
    /// <summary>
    ///背包上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSize {
      get { return maxSize_; }
      set {
        maxSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if (MaxSize != other.MaxSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (MaxSize != 0) hash ^= MaxSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (MaxSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (MaxSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPackage other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.MaxSize != 0) {
        MaxSize = other.MaxSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            MaxSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户服务器映射
  /// </summary>
  public sealed partial class PlayerServerInfo : pb::IMessage<PlayerServerInfo> {
    private static readonly pb::MessageParser<PlayerServerInfo> _parser = new pb::MessageParser<PlayerServerInfo>(() => new PlayerServerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerServerInfo(PlayerServerInfo other) : this() {
      accountUuid_ = other.accountUuid_;
      serverID_ = other.serverID_;
      servicePort_ = other.servicePort_;
      serviceHost_ = other.serviceHost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerServerInfo Clone() {
      return new PlayerServerInfo(this);
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 1;
    private string accountUuid_ = "";
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 2;
    private int serverID_;
    /// <summary>
    ///所在服务器	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "ServicePort" field.</summary>
    public const int ServicePortFieldNumber = 3;
    private int servicePort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServicePort {
      get { return servicePort_; }
      set {
        servicePort_ = value;
      }
    }

    /// <summary>Field number for the "ServiceHost" field.</summary>
    public const int ServiceHostFieldNumber = 4;
    private string serviceHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceHost {
      get { return serviceHost_; }
      set {
        serviceHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountUuid != other.AccountUuid) return false;
      if (ServerID != other.ServerID) return false;
      if (ServicePort != other.ServicePort) return false;
      if (ServiceHost != other.ServiceHost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (ServerID != 0) hash ^= ServerID.GetHashCode();
      if (ServicePort != 0) hash ^= ServicePort.GetHashCode();
      if (ServiceHost.Length != 0) hash ^= ServiceHost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountUuid);
      }
      if (ServerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerID);
      }
      if (ServicePort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServicePort);
      }
      if (ServiceHost.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServiceHost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
      }
      if (ServicePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServicePort);
      }
      if (ServiceHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceHost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.ServerID != 0) {
        ServerID = other.ServerID;
      }
      if (other.ServicePort != 0) {
        ServicePort = other.ServicePort;
      }
      if (other.ServiceHost.Length != 0) {
        ServiceHost = other.ServiceHost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccountUuid = input.ReadString();
            break;
          }
          case 16: {
            ServerID = input.ReadInt32();
            break;
          }
          case 24: {
            ServicePort = input.ReadInt32();
            break;
          }
          case 34: {
            ServiceHost = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroProperty : pb::IMessage<HeroProperty> {
    private static readonly pb::MessageParser<HeroProperty> _parser = new pb::MessageParser<HeroProperty>(() => new HeroProperty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProperty(HeroProperty other) : this() {
      property_ = other.property_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProperty Clone() {
      return new HeroProperty(this);
    }

    /// <summary>Field number for the "Property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Proto.HeroPropertyType property_ = 0;
    /// <summary>
    ///属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.HeroPropertyType Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ///值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property != 0) hash ^= Property.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Property != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Property);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Property);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroProperty other) {
      if (other == null) {
        return;
      }
      if (other.Property != 0) {
        Property = other.Property;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Property = (global::Proto.HeroPropertyType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapNode : pb::IMessage<MapNode> {
    private static readonly pb::MessageParser<MapNode> _parser = new pb::MessageParser<MapNode>(() => new MapNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNode(MapNode other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      isWalkable_ = other.isWalkable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapNode Clone() {
      return new MapNode(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "IsWalkable" field.</summary>
    public const int IsWalkableFieldNumber = 4;
    private bool isWalkable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWalkable {
      get { return isWalkable_; }
      set {
        isWalkable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (IsWalkable != other.IsWalkable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      if (IsWalkable != false) hash ^= IsWalkable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
      if (IsWalkable != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsWalkable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      if (IsWalkable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapNode other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
      if (other.IsWalkable != false) {
        IsWalkable = other.IsWalkable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
          case 32: {
            IsWalkable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapMonsterGroup : pb::IMessage<MapMonsterGroup> {
    private static readonly pb::MessageParser<MapMonsterGroup> _parser = new pb::MessageParser<MapMonsterGroup>(() => new MapMonsterGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapMonsterGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMonsterGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMonsterGroup(MapMonsterGroup other) : this() {
      pos_ = other.pos_ != null ? other.pos_.Clone() : null;
      canBeBoss_ = other.canBeBoss_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapMonsterGroup Clone() {
      return new MapMonsterGroup(this);
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 1;
    private global::Proto.MapNode pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MapNode Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "CanBeBoss" field.</summary>
    public const int CanBeBossFieldNumber = 2;
    private bool canBeBoss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanBeBoss {
      get { return canBeBoss_; }
      set {
        canBeBoss_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapMonsterGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapMonsterGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pos, other.Pos)) return false;
      if (CanBeBoss != other.CanBeBoss) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (CanBeBoss != false) hash ^= CanBeBoss.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pos);
      }
      if (CanBeBoss != false) {
        output.WriteRawTag(16);
        output.WriteBool(CanBeBoss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (CanBeBoss != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapMonsterGroup other) {
      if (other == null) {
        return;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          Pos = new global::Proto.MapNode();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.CanBeBoss != false) {
        CanBeBoss = other.CanBeBoss;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pos_ == null) {
              Pos = new global::Proto.MapNode();
            }
            input.ReadMessage(Pos);
            break;
          }
          case 16: {
            CanBeBoss = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MapGridData : pb::IMessage<MapGridData> {
    private static readonly pb::MessageParser<MapGridData> _parser = new pb::MessageParser<MapGridData>(() => new MapGridData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapGridData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapGridData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapGridData(MapGridData other) : this() {
      maxX_ = other.maxX_;
      maxY_ = other.maxY_;
      maxZ_ = other.maxZ_;
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      size_ = other.size_ != null ? other.size_.Clone() : null;
      nodes_ = other.nodes_.Clone();
      monsters_ = other.monsters_.Clone();
      born_ = other.born_ != null ? other.born_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapGridData Clone() {
      return new MapGridData(this);
    }

    /// <summary>Field number for the "MaxX" field.</summary>
    public const int MaxXFieldNumber = 1;
    private int maxX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxX {
      get { return maxX_; }
      set {
        maxX_ = value;
      }
    }

    /// <summary>Field number for the "MaxY" field.</summary>
    public const int MaxYFieldNumber = 2;
    private int maxY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxY {
      get { return maxY_; }
      set {
        maxY_ = value;
      }
    }

    /// <summary>Field number for the "MaxZ" field.</summary>
    public const int MaxZFieldNumber = 3;
    private int maxZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxZ {
      get { return maxZ_; }
      set {
        maxZ_ = value;
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private global::Proto.Vector3 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 5;
    private global::Proto.Vector3 size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "Nodes" field.</summary>
    public const int NodesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Proto.MapNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(50, global::Proto.MapNode.Parser);
    private readonly pbc::RepeatedField<global::Proto.MapNode> nodes_ = new pbc::RepeatedField<global::Proto.MapNode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.MapNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "Monsters" field.</summary>
    public const int MonstersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Proto.MapMonsterGroup> _repeated_monsters_codec
        = pb::FieldCodec.ForMessage(58, global::Proto.MapMonsterGroup.Parser);
    private readonly pbc::RepeatedField<global::Proto.MapMonsterGroup> monsters_ = new pbc::RepeatedField<global::Proto.MapMonsterGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.MapMonsterGroup> Monsters {
      get { return monsters_; }
    }

    /// <summary>Field number for the "Born" field.</summary>
    public const int BornFieldNumber = 8;
    private global::Proto.MapNode born_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MapNode Born {
      get { return born_; }
      set {
        born_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapGridData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapGridData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxX != other.MaxX) return false;
      if (MaxY != other.MaxY) return false;
      if (MaxZ != other.MaxZ) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!monsters_.Equals(other.monsters_)) return false;
      if (!object.Equals(Born, other.Born)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxX != 0) hash ^= MaxX.GetHashCode();
      if (MaxY != 0) hash ^= MaxY.GetHashCode();
      if (MaxZ != 0) hash ^= MaxZ.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      hash ^= nodes_.GetHashCode();
      hash ^= monsters_.GetHashCode();
      if (born_ != null) hash ^= Born.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxX);
      }
      if (MaxY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxY);
      }
      if (MaxZ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxZ);
      }
      if (offset_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Offset);
      }
      if (size_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Size);
      }
      nodes_.WriteTo(output, _repeated_nodes_codec);
      monsters_.WriteTo(output, _repeated_monsters_codec);
      if (born_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Born);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxX);
      }
      if (MaxY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxY);
      }
      if (MaxZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxZ);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += monsters_.CalculateSize(_repeated_monsters_codec);
      if (born_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Born);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapGridData other) {
      if (other == null) {
        return;
      }
      if (other.MaxX != 0) {
        MaxX = other.MaxX;
      }
      if (other.MaxY != 0) {
        MaxY = other.MaxY;
      }
      if (other.MaxZ != 0) {
        MaxZ = other.MaxZ;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Proto.Vector3();
        }
        Offset.MergeFrom(other.Offset);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          Size = new global::Proto.Vector3();
        }
        Size.MergeFrom(other.Size);
      }
      nodes_.Add(other.nodes_);
      monsters_.Add(other.monsters_);
      if (other.born_ != null) {
        if (born_ == null) {
          Born = new global::Proto.MapNode();
        }
        Born.MergeFrom(other.Born);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxX = input.ReadInt32();
            break;
          }
          case 16: {
            MaxY = input.ReadInt32();
            break;
          }
          case 24: {
            MaxZ = input.ReadInt32();
            break;
          }
          case 34: {
            if (offset_ == null) {
              Offset = new global::Proto.Vector3();
            }
            input.ReadMessage(Offset);
            break;
          }
          case 42: {
            if (size_ == null) {
              Size = new global::Proto.Vector3();
            }
            input.ReadMessage(Size);
            break;
          }
          case 50: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 58: {
            monsters_.AddEntriesFrom(input, _repeated_monsters_codec);
            break;
          }
          case 66: {
            if (born_ == null) {
              Born = new global::Proto.MapNode();
            }
            input.ReadMessage(Born);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroMagicData : pb::IMessage<HeroMagicData> {
    private static readonly pb::MessageParser<HeroMagicData> _parser = new pb::MessageParser<HeroMagicData>(() => new HeroMagicData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroMagicData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagicData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagicData(HeroMagicData other) : this() {
      cDTime_ = other.cDTime_;
      magicID_ = other.magicID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagicData Clone() {
      return new HeroMagicData(this);
    }

    /// <summary>Field number for the "CDTime" field.</summary>
    public const int CDTimeFieldNumber = 1;
    private float cDTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CDTime {
      get { return cDTime_; }
      set {
        cDTime_ = value;
      }
    }

    /// <summary>Field number for the "MagicID" field.</summary>
    public const int MagicIDFieldNumber = 2;
    private int magicID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicID {
      get { return magicID_; }
      set {
        magicID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroMagicData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroMagicData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CDTime, other.CDTime)) return false;
      if (MagicID != other.MagicID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CDTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CDTime);
      if (MagicID != 0) hash ^= MagicID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CDTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(CDTime);
      }
      if (MagicID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MagicID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CDTime != 0F) {
        size += 1 + 4;
      }
      if (MagicID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroMagicData other) {
      if (other == null) {
        return;
      }
      if (other.CDTime != 0F) {
        CDTime = other.CDTime;
      }
      if (other.MagicID != 0) {
        MagicID = other.MagicID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            CDTime = input.ReadFloat();
            break;
          }
          case 16: {
            MagicID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
