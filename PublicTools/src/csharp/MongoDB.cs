// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MongoDB.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.MongoDB {

  /// <summary>Holder for reflection information generated from MongoDB.proto</summary>
  public static partial class MongoDBReflection {

    #region Descriptor
    /// <summary>File descriptor for MongoDB.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MongoDBReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1Nb25nb0RCLnByb3RvEg1Qcm90by5Nb25nb0RCGhxnb29nbGUvcHJvdG9i",
            "dWYvc3RydWN0LnByb3RvIqIBCg5QbGF5SW5mb0VudGl0eRIMCgR1dWlkGAEg",
            "ASgJEhAKCHVzZXJuYW1lGAIgASgJEhAKCHBhc3N3b3JkGAMgASgJEhgKEGNy",
            "ZWF0ZV9kYXRlX3RpbWUYBCABKAMSEwoLbG9naW5fY291bnQYBSABKAUSHAoU",
            "bGFzdF9sb2dpbl9kYXRlX3RpbWUYByABKAMSEQoJc2VydmVyX2lkGAggASgF",
            "IlAKB0l0ZW1OdW0SCgoCaWQYASABKAUSCwoDbnVtGAIgASgFEgwKBHV1aWQY",
            "AyABKAkSDQoFbGV2ZWwYBCABKAUSDwoHaXNfbG9jaxgFIAEoCCJjChBHYW1l",
            "UGxheWVyRW50aXR5EgwKBHV1aWQYASABKAkSFAoMYWNjb3VudF91dWlkGAIg",
            "ASgJEgwKBGNvaW4YAyABKAUSDAoEZ29sZBgEIAEoBRIPCgdsYXN0X2lwGAUg",
            "ASgJIs4BChFJdGVtUGFja2FnZUVudGl0eRI6CgVpdGVtcxgBIAMoCzIrLlBy",
            "b3RvLk1vbmdvREIuSXRlbVBhY2thZ2VFbnRpdHkuSXRlbXNFbnRyeRIMCgR1",
            "dWlkGAIgASgJEhMKC3BsYXllcl91dWlkGAMgASgJEhQKDHBhY2thZ2Vfc2l6",
            "ZRgEIAEoBRpECgpJdGVtc0VudHJ5EgsKA2tleRgBIAEoCRIlCgV2YWx1ZRgC",
            "IAEoCzIWLlByb3RvLk1vbmdvREIuSXRlbU51bToCOAEiJwoJSGVyb01hZ2lj",
            "Eg0KBWxldmVsGAEgASgFEgsKA2V4cBgCIAEoBSLhAgoOR2FtZUhlcm9FbnRp",
            "dHkSDAoEdXVpZBgBIAEoCRITCgtwbGF5ZXJfdXVpZBgCIAEoCRILCgNleHAY",
            "AyABKAUSDQoFbGV2ZWwYBCABKAUSOQoGbWFnaWNzGAUgAygLMikuUHJvdG8u",
            "TW9uZ29EQi5HYW1lSGVyb0VudGl0eS5NYWdpY3NFbnRyeRI5CgZlcXVpcHMY",
            "BiADKAsyKS5Qcm90by5Nb25nb0RCLkdhbWVIZXJvRW50aXR5LkVxdWlwc0Vu",
            "dHJ5EhEKCWhlcm9fbmFtZRgHIAEoCRIPCgdoZXJvX2lkGAggASgFGkcKC01h",
            "Z2ljc0VudHJ5EgsKA2tleRgBIAEoBRInCgV2YWx1ZRgCIAEoCzIYLlByb3Rv",
            "Lk1vbmdvREIuSGVyb01hZ2ljOgI4ARotCgtFcXVpcHNFbnRyeRILCgNrZXkY",
            "ASABKAUSDQoFdmFsdWUYAiABKAk6AjgBIscBChRHYW1lU2VydmVySW5mb0Vu",
            "dGl0eRIMCgR1dWlkGAEgASgJEgwKBGhvc3QYAiABKAkSDAoEcG9ydBgDIAEo",
            "BRIRCglzZXJ2ZXJfaWQYBCABKAUSGAoQbWF4X3BsYXllcl9Db3VudBgFIAEo",
            "BRIcChRjdXJyZW50X3BsYXllcl9jb3VudBgGIAEoBRIRCgljbGllbnRfaWQY",
            "ByABKAUSJwoEdHlwZRgIIAEoDjIZLlByb3RvLk1vbmdvREIuU2VydmVyVHlw",
            "ZSKMAQoVVXNlclNlc3Npb25JbmZvRW50aXR5EgwKBHV1aWQYASABKAkSFAoM",
            "YWNjb3VudF91dWlkGAIgASgJEhYKDmdhdGVfc2VydmVyX2lkGAMgASgFEhgK",
            "EGJhdHRsZV9zZXJ2ZXJfaWQYBCABKAUSDQoFdG9rZW4YBSABKAkSDgoGbWFw",
            "X2lkGAYgASgFKigKClNlcnZlclR5cGUSDQoJU1RfQmF0dGxlEAASCwoHU1Rf",
            "R2F0ZRABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.MongoDB.ServerType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.PlayInfoEntity), global::Proto.MongoDB.PlayInfoEntity.Parser, new[]{ "Uuid", "Username", "Password", "CreateDateTime", "LoginCount", "LastLoginDateTime", "ServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.ItemNum), global::Proto.MongoDB.ItemNum.Parser, new[]{ "Id", "Num", "Uuid", "Level", "IsLock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.GamePlayerEntity), global::Proto.MongoDB.GamePlayerEntity.Parser, new[]{ "Uuid", "AccountUuid", "Coin", "Gold", "LastIp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.ItemPackageEntity), global::Proto.MongoDB.ItemPackageEntity.Parser, new[]{ "Items", "Uuid", "PlayerUuid", "PackageSize" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.HeroMagic), global::Proto.MongoDB.HeroMagic.Parser, new[]{ "Level", "Exp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.GameHeroEntity), global::Proto.MongoDB.GameHeroEntity.Parser, new[]{ "Uuid", "PlayerUuid", "Exp", "Level", "Magics", "Equips", "HeroName", "HeroId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.GameServerInfoEntity), global::Proto.MongoDB.GameServerInfoEntity.Parser, new[]{ "Uuid", "Host", "Port", "ServerId", "MaxPlayerCount", "CurrentPlayerCount", "ClientId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.UserSessionInfoEntity), global::Proto.MongoDB.UserSessionInfoEntity.Parser, new[]{ "Uuid", "AccountUuid", "GateServerId", "BattleServerId", "Token", "MapId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ServerType {
    [pbr::OriginalName("ST_Battle")] StBattle = 0,
    [pbr::OriginalName("ST_Gate")] StGate = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///account 
  /// </summary>
  public sealed partial class PlayInfoEntity : pb::IMessage<PlayInfoEntity> {
    private static readonly pb::MessageParser<PlayInfoEntity> _parser = new pb::MessageParser<PlayInfoEntity>(() => new PlayInfoEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayInfoEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayInfoEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayInfoEntity(PlayInfoEntity other) : this() {
      uuid_ = other.uuid_;
      username_ = other.username_;
      password_ = other.password_;
      createDateTime_ = other.createDateTime_;
      loginCount_ = other.loginCount_;
      lastLoginDateTime_ = other.lastLoginDateTime_;
      serverId_ = other.serverId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayInfoEntity Clone() {
      return new PlayInfoEntity(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    /// <summary>
    ///id  key of the entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_date_time" field.</summary>
    public const int CreateDateTimeFieldNumber = 4;
    private long createDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateDateTime {
      get { return createDateTime_; }
      set {
        createDateTime_ = value;
      }
    }

    /// <summary>Field number for the "login_count" field.</summary>
    public const int LoginCountFieldNumber = 5;
    private int loginCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginCount {
      get { return loginCount_; }
      set {
        loginCount_ = value;
      }
    }

    /// <summary>Field number for the "last_login_date_time" field.</summary>
    public const int LastLoginDateTimeFieldNumber = 7;
    private long lastLoginDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLoginDateTime {
      get { return lastLoginDateTime_; }
      set {
        lastLoginDateTime_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 8;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayInfoEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayInfoEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (CreateDateTime != other.CreateDateTime) return false;
      if (LoginCount != other.LoginCount) return false;
      if (LastLoginDateTime != other.LastLoginDateTime) return false;
      if (ServerId != other.ServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (CreateDateTime != 0L) hash ^= CreateDateTime.GetHashCode();
      if (LoginCount != 0) hash ^= LoginCount.GetHashCode();
      if (LastLoginDateTime != 0L) hash ^= LastLoginDateTime.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (CreateDateTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CreateDateTime);
      }
      if (LoginCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LoginCount);
      }
      if (LastLoginDateTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(LastLoginDateTime);
      }
      if (ServerId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ServerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (CreateDateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateDateTime);
      }
      if (LoginCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginCount);
      }
      if (LastLoginDateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLoginDateTime);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayInfoEntity other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.CreateDateTime != 0L) {
        CreateDateTime = other.CreateDateTime;
      }
      if (other.LoginCount != 0) {
        LoginCount = other.LoginCount;
      }
      if (other.LastLoginDateTime != 0L) {
        LastLoginDateTime = other.LastLoginDateTime;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 32: {
            CreateDateTime = input.ReadInt64();
            break;
          }
          case 40: {
            LoginCount = input.ReadInt32();
            break;
          }
          case 56: {
            LastLoginDateTime = input.ReadInt64();
            break;
          }
          case 64: {
            ServerId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemNum : pb::IMessage<ItemNum> {
    private static readonly pb::MessageParser<ItemNum> _parser = new pb::MessageParser<ItemNum>(() => new ItemNum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemNum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemNum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemNum(ItemNum other) : this() {
      id_ = other.id_;
      num_ = other.num_;
      uuid_ = other.uuid_;
      level_ = other.level_;
      isLock_ = other.isLock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemNum Clone() {
      return new ItemNum(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 3;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "is_lock" field.</summary>
    public const int IsLockFieldNumber = 5;
    private bool isLock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLock {
      get { return isLock_; }
      set {
        isLock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemNum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemNum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      if (Uuid != other.Uuid) return false;
      if (Level != other.Level) return false;
      if (IsLock != other.IsLock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (IsLock != false) hash ^= IsLock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Uuid);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (IsLock != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (IsLock != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemNum other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.IsLock != false) {
        IsLock = other.IsLock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 26: {
            Uuid = input.ReadString();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 40: {
            IsLock = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///game
  /// </summary>
  public sealed partial class GamePlayerEntity : pb::IMessage<GamePlayerEntity> {
    private static readonly pb::MessageParser<GamePlayerEntity> _parser = new pb::MessageParser<GamePlayerEntity>(() => new GamePlayerEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamePlayerEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayerEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayerEntity(GamePlayerEntity other) : this() {
      uuid_ = other.uuid_;
      accountUuid_ = other.accountUuid_;
      coin_ = other.coin_;
      gold_ = other.gold_;
      lastIp_ = other.lastIp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayerEntity Clone() {
      return new GamePlayerEntity(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_uuid" field.</summary>
    public const int AccountUuidFieldNumber = 2;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 3;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "last_ip" field.</summary>
    public const int LastIpFieldNumber = 5;
    private string lastIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastIp {
      get { return lastIp_; }
      set {
        lastIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GamePlayerEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamePlayerEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (AccountUuid != other.AccountUuid) return false;
      if (Coin != other.Coin) return false;
      if (Gold != other.Gold) return false;
      if (LastIp != other.LastIp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (LastIp.Length != 0) hash ^= LastIp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountUuid);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coin);
      }
      if (Gold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gold);
      }
      if (LastIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LastIp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (LastIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastIp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamePlayerEntity other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.LastIp.Length != 0) {
        LastIp = other.LastIp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            AccountUuid = input.ReadString();
            break;
          }
          case 24: {
            Coin = input.ReadInt32();
            break;
          }
          case 32: {
            Gold = input.ReadInt32();
            break;
          }
          case 42: {
            LastIp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///game
  /// </summary>
  public sealed partial class ItemPackageEntity : pb::IMessage<ItemPackageEntity> {
    private static readonly pb::MessageParser<ItemPackageEntity> _parser = new pb::MessageParser<ItemPackageEntity>(() => new ItemPackageEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemPackageEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemPackageEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemPackageEntity(ItemPackageEntity other) : this() {
      items_ = other.items_.Clone();
      uuid_ = other.uuid_;
      playerUuid_ = other.playerUuid_;
      packageSize_ = other.packageSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemPackageEntity Clone() {
      return new ItemPackageEntity(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Proto.MongoDB.ItemNum>.Codec _map_items_codec
        = new pbc::MapField<string, global::Proto.MongoDB.ItemNum>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Proto.MongoDB.ItemNum.Parser), 10);
    private readonly pbc::MapField<string, global::Proto.MongoDB.ItemNum> items_ = new pbc::MapField<string, global::Proto.MongoDB.ItemNum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Proto.MongoDB.ItemNum> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_uuid" field.</summary>
    public const int PlayerUuidFieldNumber = 3;
    private string playerUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerUuid {
      get { return playerUuid_; }
      set {
        playerUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package_size" field.</summary>
    public const int PackageSizeFieldNumber = 4;
    private int packageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PackageSize {
      get { return packageSize_; }
      set {
        packageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemPackageEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemPackageEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      if (Uuid != other.Uuid) return false;
      if (PlayerUuid != other.PlayerUuid) return false;
      if (PackageSize != other.PackageSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (PlayerUuid.Length != 0) hash ^= PlayerUuid.GetHashCode();
      if (PackageSize != 0) hash ^= PackageSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (PlayerUuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerUuid);
      }
      if (PackageSize != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PackageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (PlayerUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerUuid);
      }
      if (PackageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PackageSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemPackageEntity other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.PlayerUuid.Length != 0) {
        PlayerUuid = other.PlayerUuid;
      }
      if (other.PackageSize != 0) {
        PackageSize = other.PackageSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 26: {
            PlayerUuid = input.ReadString();
            break;
          }
          case 32: {
            PackageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///hero
  /// </summary>
  public sealed partial class HeroMagic : pb::IMessage<HeroMagic> {
    private static readonly pb::MessageParser<HeroMagic> _parser = new pb::MessageParser<HeroMagic>(() => new HeroMagic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroMagic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagic(HeroMagic other) : this() {
      level_ = other.level_;
      exp_ = other.exp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagic Clone() {
      return new HeroMagic(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroMagic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroMagic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroMagic other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///hero
  /// </summary>
  public sealed partial class GameHeroEntity : pb::IMessage<GameHeroEntity> {
    private static readonly pb::MessageParser<GameHeroEntity> _parser = new pb::MessageParser<GameHeroEntity>(() => new GameHeroEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameHeroEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameHeroEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameHeroEntity(GameHeroEntity other) : this() {
      uuid_ = other.uuid_;
      playerUuid_ = other.playerUuid_;
      exp_ = other.exp_;
      level_ = other.level_;
      magics_ = other.magics_.Clone();
      equips_ = other.equips_.Clone();
      heroName_ = other.heroName_;
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameHeroEntity Clone() {
      return new GameHeroEntity(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    /// <summary>
    ///hero uuid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_uuid" field.</summary>
    public const int PlayerUuidFieldNumber = 2;
    private string playerUuid_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerUuid {
      get { return playerUuid_; }
      set {
        playerUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    /// <summary>
    ///level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "magics" field.</summary>
    public const int MagicsFieldNumber = 5;
    private static readonly pbc::MapField<int, global::Proto.MongoDB.HeroMagic>.Codec _map_magics_codec
        = new pbc::MapField<int, global::Proto.MongoDB.HeroMagic>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Proto.MongoDB.HeroMagic.Parser), 42);
    private readonly pbc::MapField<int, global::Proto.MongoDB.HeroMagic> magics_ = new pbc::MapField<int, global::Proto.MongoDB.HeroMagic>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Proto.MongoDB.HeroMagic> Magics {
      get { return magics_; }
    }

    /// <summary>Field number for the "equips" field.</summary>
    public const int EquipsFieldNumber = 6;
    private static readonly pbc::MapField<int, string>.Codec _map_equips_codec
        = new pbc::MapField<int, string>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<int, string> equips_ = new pbc::MapField<int, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, string> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "hero_name" field.</summary>
    public const int HeroNameFieldNumber = 7;
    private string heroName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroName {
      get { return heroName_; }
      set {
        heroName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 8;
    private int heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameHeroEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameHeroEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (PlayerUuid != other.PlayerUuid) return false;
      if (Exp != other.Exp) return false;
      if (Level != other.Level) return false;
      if (!Magics.Equals(other.Magics)) return false;
      if (!Equips.Equals(other.Equips)) return false;
      if (HeroName != other.HeroName) return false;
      if (HeroId != other.HeroId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (PlayerUuid.Length != 0) hash ^= PlayerUuid.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= Magics.GetHashCode();
      hash ^= Equips.GetHashCode();
      if (HeroName.Length != 0) hash ^= HeroName.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (PlayerUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerUuid);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      magics_.WriteTo(output, _map_magics_codec);
      equips_.WriteTo(output, _map_equips_codec);
      if (HeroName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HeroName);
      }
      if (HeroId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HeroId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (PlayerUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerUuid);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += magics_.CalculateSize(_map_magics_codec);
      size += equips_.CalculateSize(_map_equips_codec);
      if (HeroName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroName);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameHeroEntity other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.PlayerUuid.Length != 0) {
        PlayerUuid = other.PlayerUuid;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      magics_.Add(other.magics_);
      equips_.Add(other.equips_);
      if (other.HeroName.Length != 0) {
        HeroName = other.HeroName;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            PlayerUuid = input.ReadString();
            break;
          }
          case 24: {
            Exp = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
          case 42: {
            magics_.AddEntriesFrom(input, _map_magics_codec);
            break;
          }
          case 50: {
            equips_.AddEntriesFrom(input, _map_equips_codec);
            break;
          }
          case 58: {
            HeroName = input.ReadString();
            break;
          }
          case 64: {
            HeroId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器信息
  /// </summary>
  public sealed partial class GameServerInfoEntity : pb::IMessage<GameServerInfoEntity> {
    private static readonly pb::MessageParser<GameServerInfoEntity> _parser = new pb::MessageParser<GameServerInfoEntity>(() => new GameServerInfoEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerInfoEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoEntity(GameServerInfoEntity other) : this() {
      uuid_ = other.uuid_;
      host_ = other.host_;
      port_ = other.port_;
      serverId_ = other.serverId_;
      maxPlayerCount_ = other.maxPlayerCount_;
      currentPlayerCount_ = other.currentPlayerCount_;
      clientId_ = other.clientId_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfoEntity Clone() {
      return new GameServerInfoEntity(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private string host_ = "";
    /// <summary>
    ///主机地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    /// <summary>
    ///主机端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private int serverId_;
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "max_player_Count" field.</summary>
    public const int MaxPlayerCountFieldNumber = 5;
    private int maxPlayerCount_;
    /// <summary>
    ///最大服务数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayerCount {
      get { return maxPlayerCount_; }
      set {
        maxPlayerCount_ = value;
      }
    }

    /// <summary>Field number for the "current_player_count" field.</summary>
    public const int CurrentPlayerCountFieldNumber = 6;
    private int currentPlayerCount_;
    /// <summary>
    ///当前玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPlayerCount {
      get { return currentPlayerCount_; }
      set {
        currentPlayerCount_ = value;
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 7;
    private int clientId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientId {
      get { return clientId_; }
      set {
        clientId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private global::Proto.MongoDB.ServerType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MongoDB.ServerType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerInfoEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerInfoEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (ServerId != other.ServerId) return false;
      if (MaxPlayerCount != other.MaxPlayerCount) return false;
      if (CurrentPlayerCount != other.CurrentPlayerCount) return false;
      if (ClientId != other.ClientId) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (MaxPlayerCount != 0) hash ^= MaxPlayerCount.GetHashCode();
      if (CurrentPlayerCount != 0) hash ^= CurrentPlayerCount.GetHashCode();
      if (ClientId != 0) hash ^= ClientId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (MaxPlayerCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxPlayerCount);
      }
      if (CurrentPlayerCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurrentPlayerCount);
      }
      if (ClientId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ClientId);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (MaxPlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayerCount);
      }
      if (CurrentPlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayerCount);
      }
      if (ClientId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerInfoEntity other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.MaxPlayerCount != 0) {
        MaxPlayerCount = other.MaxPlayerCount;
      }
      if (other.CurrentPlayerCount != 0) {
        CurrentPlayerCount = other.CurrentPlayerCount;
      }
      if (other.ClientId != 0) {
        ClientId = other.ClientId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            Host = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 40: {
            MaxPlayerCount = input.ReadInt32();
            break;
          }
          case 48: {
            CurrentPlayerCount = input.ReadInt32();
            break;
          }
          case 56: {
            ClientId = input.ReadInt32();
            break;
          }
          case 64: {
            Type = (global::Proto.MongoDB.ServerType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户当前的服务器信息
  /// </summary>
  public sealed partial class UserSessionInfoEntity : pb::IMessage<UserSessionInfoEntity> {
    private static readonly pb::MessageParser<UserSessionInfoEntity> _parser = new pb::MessageParser<UserSessionInfoEntity>(() => new UserSessionInfoEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSessionInfoEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSessionInfoEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSessionInfoEntity(UserSessionInfoEntity other) : this() {
      uuid_ = other.uuid_;
      accountUuid_ = other.accountUuid_;
      gateServerId_ = other.gateServerId_;
      battleServerId_ = other.battleServerId_;
      token_ = other.token_;
      mapId_ = other.mapId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSessionInfoEntity Clone() {
      return new UserSessionInfoEntity(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_uuid" field.</summary>
    public const int AccountUuidFieldNumber = 2;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gate_server_id" field.</summary>
    public const int GateServerIdFieldNumber = 3;
    private int gateServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GateServerId {
      get { return gateServerId_; }
      set {
        gateServerId_ = value;
      }
    }

    /// <summary>Field number for the "battle_server_id" field.</summary>
    public const int BattleServerIdFieldNumber = 4;
    private int battleServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleServerId {
      get { return battleServerId_; }
      set {
        battleServerId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 5;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "map_id" field.</summary>
    public const int MapIdFieldNumber = 6;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSessionInfoEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSessionInfoEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (AccountUuid != other.AccountUuid) return false;
      if (GateServerId != other.GateServerId) return false;
      if (BattleServerId != other.BattleServerId) return false;
      if (Token != other.Token) return false;
      if (MapId != other.MapId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (GateServerId != 0) hash ^= GateServerId.GetHashCode();
      if (BattleServerId != 0) hash ^= BattleServerId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountUuid);
      }
      if (GateServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GateServerId);
      }
      if (BattleServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BattleServerId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Token);
      }
      if (MapId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MapId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (GateServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GateServerId);
      }
      if (BattleServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleServerId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSessionInfoEntity other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.GateServerId != 0) {
        GateServerId = other.GateServerId;
      }
      if (other.BattleServerId != 0) {
        BattleServerId = other.BattleServerId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            AccountUuid = input.ReadString();
            break;
          }
          case 24: {
            GateServerId = input.ReadInt32();
            break;
          }
          case 32: {
            BattleServerId = input.ReadInt32();
            break;
          }
          case 42: {
            Token = input.ReadString();
            break;
          }
          case 48: {
            MapId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
