// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEgVQcm90bxoKZGF0YS5wcm90bxoLY29uc3QucHJv",
            "dG8aEGV4Y2VsY29uc3QucHJvdG8iBgoEVm9pZCJACglDMkxfTG9naW4SDwoH",
            "VmVyc2lvbhgBIAEoBRIQCghVc2VyTmFtZRgCIAEoCRIQCghQYXNzd29yZBgD",
            "IAEoCSJzCglMMkNfTG9naW4SHgoEQ29kZRgBIAEoDjIQLlByb3RvLkVycm9y",
            "Q29kZRIOCgZVc2VySUQYAiABKAMSDwoHU2Vzc2lvbhgDIAEoCRIlCgZTZXJ2",
            "ZXIYBCABKAsyFS5Qcm90by5HYW1lU2VydmVySW5mbyI+CgdDMkxfUmVnEg8K",
            "B1ZlcnNpb24YASABKAUSEAoIVXNlck5hbWUYAiABKAkSEAoIUGFzc3dvcmQY",
            "AyABKAkicQoHTDJDX1JlZxIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JD",
            "b2RlEg8KB1Nlc3Npb24YAiABKAkSDgoGVXNlcklEGAMgASgDEiUKBlNlcnZl",
            "chgEIAEoCzIVLlByb3RvLkdhbWVTZXJ2ZXJJbmZvIj0KCUMyR19Mb2dpbhIP",
            "CgdWZXJzaW9uGAEgASgFEg8KB1Nlc3Npb24YAiABKAkSDgoGVXNlcklEGAMg",
            "ASgDIooBCglHMkNfTG9naW4SHgoEQ29kZRgBIAEoDjIQLlByb3RvLkVycm9y",
            "Q29kZRIaCgRIZXJvGAIgASgLMgwuUHJvdG8uREhlcm8SJQoHUGFja2FnZRgD",
            "IAEoCzIULlByb3RvLlBsYXllclBhY2thZ2USDAoER29sZBgEIAEoBRIMCgRD",
            "b2luGAUgASgFIiAKDkMyR19DcmVhdGVIZXJvEg4KBkhlcm9JRBgBIAEoBSIw",
            "Cg5HMkNfQ3JlYXRlSGVybxIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JD",
            "b2RlIh4KDUMyR19CZWdpbkdhbWUSDQoFTWFwSUQYASABKAUiWgoNRzJDX0Jl",
            "Z2luR2FtZRIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlEikKClNl",
            "cnZlckluZm8YAiABKAsyFS5Qcm90by5HYW1lU2VydmVySW5mbyIeCgxDMkJf",
            "RXhpdEdhbWUSDgoGVXNlcklEGAEgASgDIi4KDEIyQ19FeGl0R2FtZRIeCgRD",
            "b2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlIjwKE1Rhc2tfRzJDX0pvaW5C",
            "YXR0bGUSJQoGU2VydmVyGAEgASgLMhUuUHJvdG8uR2FtZVNlcnZlckluZm8i",
            "UQoOQzJCX0pvaW5CYXR0bGUSDQoFTWFwSUQYASABKAUSDwoHU2Vzc2lvbhgC",
            "IAEoCRIOCgZVc2VySUQYAyABKAMSDwoHVmVyc2lvbhgEIAEoBSIwCg5CMkNf",
            "Sm9pbkJhdHRsZRIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlIiAK",
            "DkMyQl9FeGl0QmF0dGxlEg4KBlVzZXJJRBgBIAEoAyIwCg5CMkNfRXhpdEJh",
            "dHRsZRIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlIiMKEUMyR19H",
            "ZXRMYXN0QmF0dGxlEg4KBlVzZXJJRBgBIAEoAyJvChFHMkNfR2V0TGFzdEJh",
            "dHRsZRIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlEisKDEJhdHRs",
            "ZVNlcnZlchgCIAEoCzIVLlByb3RvLkdhbWVTZXJ2ZXJJbmZvEg0KBU1hcElE",
            "GAMgASgFIj8KFUFjdGlvbl9DbGlja01hcEdyb3VuZBImCg5UYXJnZXRQb3Np",
            "dGlvbhgBIAEoCzIOLlByb3RvLlZlY3RvcjMiKgoWQWN0aW9uX0NsaWNrU2tp",
            "bGxJbmRleBIQCghNYWdpY0tleRgBIAEoCSIlChVBY3Rpb25fQXV0b0ZpbmRU",
            "YXJnZXQSDAoEQXV0bxgBIAEoCCJZChRUYXNrX0cyQ19TeW5jUGFja2FnZRIl",
            "CgdQYWNrYWdlGAEgASgLMhQuUHJvdG8uUGxheWVyUGFja2FnZRIMCgRHb2xk",
            "GAIgASgFEgwKBENvaW4YAyABKAUiLwoRVGFza19HMkNfU3luY0hlcm8SGgoE",
            "SGVybxgBIAEoCzIMLlByb3RvLkRIZXJvImUKEUMyR19PcGVyYXRvckVxdWlw",
            "Eg4KBkhlcm9JRBgBIAEoAxIMCgRHdWlkGAIgASgJEiIKBFBhcnQYAyABKA4y",
            "FC5Qcm90by5FcXVpcG1lbnRUeXBlEg4KBklzV2VhchgEIAEoCCJPChFHMkNf",
            "T3BlcmF0b3JFcXVpcBIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2Rl",
            "EhoKBEhlcm8YAiABKAsyDC5Qcm90by5ESGVybyIuCgxDMkdfU2FsZUl0ZW0S",
            "HgoFSXRlbXMYASADKAsyDy5Qcm90by5TYWxlSXRlbSJrCgxHMkNfU2FsZUl0",
            "ZW0SHgoEQ29kZRgBIAEoDjIQLlByb3RvLkVycm9yQ29kZRIfCgREaWZmGAIg",
            "AygLMhEuUHJvdG8uUGxheWVySXRlbRIMCgRHb2xkGAMgASgFEgwKBENvaW4Y",
            "BCABKAUiMwoUQzJHX0VxdWlwbWVudExldmVsVXASDAoER3VpZBgBIAEoCRIN",
            "CgVMZXZlbBgCIAEoBSKGAQoURzJDX0VxdWlwbWVudExldmVsVXASHgoEQ29k",
            "ZRgBIAEoDjIQLlByb3RvLkVycm9yQ29kZRIPCgdMZXZlbFVwGAIgASgIEgwK",
            "BEdvbGQYAyABKAUSDAoEQ29pbhgEIAEoBRIhCgtSZXN1bHRFcXVpcBgFIAEo",
            "CzIMLlByb3RvLkVxdWlwIh8KCkMyR19HTVRvb2wSEQoJR01Db21tYW5kGAEg",
            "ASgJIiwKCkcyQ19HTVRvb2wSHgoEQ29kZRgBIAEoDjIQLlByb3RvLkVycm9y",
            "Q29kZSJNChRUYXNrX0wyQl9TdGFydEJhdHRsZRImCgVVc2VycxgBIAMoCzIX",
            "LlByb3RvLlBsYXllclNlcnZlckluZm8SDQoFTWFwSUQYAiABKAUiIwoRVGFz",
            "a19MMkJfRXhpdFVzZXISDgoGVXNlcklEGAEgASgDIp0BCgdHMkxfUmVnEg8K",
            "B1ZlcnNpb24YASABKAUSDAoESG9zdBgCIAEoCRIMCgRQb3J0GAMgASgFEhMK",
            "C1NlcnZpY2VIb3N0GAQgASgJEhQKDFNlcnZpY2VzUHJvdBgFIAEoBRIQCghT",
            "ZXJ2ZXJJRBgGIAEoBRIRCglNYXhQbGF5ZXIYByABKAUSFQoNQ3VycmVudFBs",
            "YXllchgIIAEoBSIpCgdMMkdfUmVnEh4KBENvZGUYASABKA4yEC5Qcm90by5F",
            "cnJvckNvZGUiNwoURzJMX0NoZWNrVXNlclNlc3Npb24SDgoGVXNlcklEGAEg",
            "ASgDEg8KB1Nlc3Npb24YAiABKAkiNgoUTDJHX0NoZWNrVXNlclNlc3Npb24S",
            "HgoEQ29kZRgBIAEoDjIQLlByb3RvLkVycm9yQ29kZSIwCg9HMkxfQmVnaW5C",
            "YXR0bGUSDgoGVXNlcklEGAEgASgDEg0KBU1hcElEGAIgASgFIl4KD0wyR19C",
            "ZWdpbkJhdHRsZRIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlEisK",
            "DEJhdHRsZVNlcnZlchgCIAEoCzIVLlByb3RvLkdhbWVTZXJ2ZXJJbmZvIiMK",
            "EUcyTF9HZXRMYXN0QmF0dGxlEg4KBlVzZXJJRBgBIAEoAyJvChFMMkdfR2V0",
            "TGFzdEJhdHRsZRIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlEisK",
            "DEJhdHRsZVNlcnZlchgCIAEoCzIVLlByb3RvLkdhbWVTZXJ2ZXJJbmZvEg0K",
            "BU1hcElEGAMgASgFImgKE0IyTF9SZWdCYXR0bGVTZXJ2ZXISDwoHVmVyc2lv",
            "bhgBIAEoBRITCgtTZXJ2aWNlUG9ydBgCIAEoBRITCgtTZXJ2aWNlSG9zdBgD",
            "IAEoCRIWCg5NYXhCYXR0bGVDb3VudBgEIAEoBSJOChNMMkJfUmVnQmF0dGxl",
            "U2VydmVyEh4KBENvZGUYASABKA4yEC5Qcm90by5FcnJvckNvZGUSFwoPU2Vy",
            "dmljZVNlcnZlcklEGAIgASgFIh8KDUIyTF9FbmRCYXR0bGUSDgoGVXNlcklE",
            "GAEgASgDIi8KDUwyQl9FbmRCYXR0bGUSHgoEQ29kZRgBIAEoDjIQLlByb3Rv",
            "LkVycm9yQ29kZSI2ChBCMkxfQ2hlY2tTZXNzaW9uEhIKClNlc3Npb25LZXkY",
            "ASABKAkSDgoGVXNlcklEGAIgASgDIjIKEEwyQl9DaGVja1Nlc3Npb24SHgoE",
            "Q29kZRgBIAEoDjIQLlByb3RvLkVycm9yQ29kZSI8ChFCMkdfR2V0UGxheWVy",
            "SW5mbxIOCgZVc2VySUQYASABKAMSFwoPU2VydmljZVNlcnZlcklEGAIgASgF",
            "InYKEUcyQl9HZXRQbGF5ZXJJbmZvEh4KBENvZGUYASABKA4yEC5Qcm90by5F",
            "cnJvckNvZGUSGgoESGVybxgCIAEoCzIMLlByb3RvLkRIZXJvEiUKB1BhY2th",
            "Z2UYAyABKAsyFC5Qcm90by5QbGF5ZXJQYWNrYWdlIo4BChBCMkdfQmF0dGxl",
            "UmV3YXJkEg4KBlVzZXJJRBgBIAEoAxIMCgRHb2xkGAIgASgFEg0KBU1hcElE",
            "GAMgASgFEiQKCURyb3BJdGVtcxgEIAMoCzIRLlByb3RvLlBsYXllckl0ZW0S",
            "JwoMQ29uc3VtZUl0ZW1zGAUgAygLMhEuUHJvdG8uUGxheWVySXRlbSIyChBH",
            "MkJfQmF0dGxlUmV3YXJkEh4KBENvZGUYASABKA4yEC5Qcm90by5FcnJvckNv",
            "ZGUiKAoXTm90aWZ5X0VsZW1lbnRKb2luU3RhdGUSDQoFSW5kZXgYASABKAUi",
            "KAoXTm90aWZ5X0VsZW1lbnRFeGl0U3RhdGUSDQoFSW5kZXgYASABKAUiZAoV",
            "Tm90aWZ5X0NyZWF0ZVJlbGVhc2VyEg0KBUluZGV4GAEgASgFEhUKDVJlbGVh",
            "c2VySW5kZXgYAiABKAUSEwoLVGFyZ2V0SW5kZXgYAyABKAUSEAoITWFnaWNL",
            "ZXkYBCABKAkiqQMKHE5vdGlmeV9DcmVhdGVCYXR0bGVDaGFyYWN0ZXISDQoF",
            "SW5kZXgYASABKAUSDgoGVXNlcklEGAIgASgDEhAKCENvbmZpZ0lEGAMgASgF",
            "EhEKCVRlYW1JbmRleBgEIAEoBRIgCghQb3NpdGlvbhgFIAEoCzIOLlByb3Rv",
            "LlZlY3RvcjMSHwoHRm9yd2FyZBgGIAEoCzIOLlByb3RvLlZlY3RvcjMSDQoF",
            "TGV2ZWwYByABKAUSCgoCSFAYCCABKAUSCgoCTVAYCSABKAUSJwoKUHJvcGVy",
            "dGllcxgKIAMoCzITLlByb3RvLkhlcm9Qcm9wZXJ0eRIiCgdURGFtYWdlGAsg",
            "ASgOMhEuUHJvdG8uRGFtYWdlVHlwZRIkCghURGVmYW5jZRgMIAEoDjISLlBy",
            "b3RvLkRlZmFuY2VUeXBlEiUKCENhdGVnb3J5GA0gASgOMhMuUHJvdG8uSGVy",
            "b0NhdGVnb3J5EgwKBE5hbWUYDiABKAkSDQoFU3BlZWQYDyABKAISJAoGTWFn",
            "aWNzGBAgAygLMhQuUHJvdG8uSGVyb01hZ2ljRGF0YSLGAQoUTm90aWZ5X0Ny",
            "ZWF0ZU1pc3NpbGUSDQoFSW5kZXgYASABKAUSFQoNUmVsZWFzZXJJbmRleBgC",
            "IAEoBRIVCg1SZXNvdXJjZXNQYXRoGAMgASgJEg0KBVNwZWVkGAQgASgCEiAK",
            "CFBvc2l0aW9uGAUgASgLMg4uUHJvdG8uVmVjdG9yMxIQCghmb3JtQm9uZRgG",
            "IAEoCRIOCgZ0b0JvbmUYByABKAkSHgoGb2Zmc2V0GAggASgLMg4uUHJvdG8u",
            "VmVjdG9yMyKWAQoYTm90aWZ5X0NoYXJhY3RlclBvc2l0aW9uEg0KBUluZGV4",
            "GAEgASgFEiQKDExhc3RQb3NpdGlvbhgCIAEoCzIOLlByb3RvLlZlY3RvcjMS",
            "JgoOVGFyZ2V0UG9zaXRpb24YAyABKAsyDi5Qcm90by5WZWN0b3IzEh0KBFR5",
            "cGUYBCABKA4yDy5Qcm90by5Nb3ZlVHlwZSI4ChdOb3RpZnlfTGF5b3V0UGxh",
            "eU1vdGlvbhINCgVJbmRleBgBIAEoBRIOCgZNb3Rpb24YAiABKAkiNQoWTm90",
            "aWZ5X0xvb2tBdENoYXJhY3RlchILCgNPd24YASABKAUSDgoGVGFyZ2V0GAIg",
            "ASgFIscBChlOb3RpZnlfTGF5b3V0UGxheVBhcnRpY2xlEhQKDFJlbGVhc2VJ",
            "bmRleBgBIAEoBRISCgpGcm9tVGFyZ2V0GAIgASgFEhAKCFRvVGFyZ2V0GAMg",
            "ASgFEhQKDEZyb21Cb25lTmFtZRgEIAEoCRISCgpUb0JvbmVOYW1lGAUgASgJ",
            "EgwKBEJpbmQYBiABKAgSEwoLRGVzdG9yeVR5cGUYByABKAUSEwoLRGVzdG9y",
            "eVRpbWUYCCABKAISDAoEUGF0aBgJIAEoCSJiChROb3RpZnlfUHJvcGVydHlW",
            "YWx1ZRINCgVJbmRleBgBIAEoBRIlCgRUeXBlGAIgASgOMhcuUHJvdG8uSGVy",
            "b1Byb3BlcnR5VHlwZRIUCgxGaW5hbGx5VmFsdWUYAyABKAUiSwoPTm90aWZ5",
            "X0hQQ2hhbmdlEg0KBUluZGV4GAEgASgFEhAKCFRhcmdldEhQGAIgASgFEgoK",
            "AkhQGAMgASgFEgsKA01heBgEIAEoBSJLCg9Ob3RpZnlfTVBDaGFuZ2USDQoF",
            "SW5kZXgYASABKAUSEAoIVGFyZ2V0TVAYAiABKAUSCgoCTVAYAyABKAUSCwoD",
            "TWF4GAQgASgFIlsKE05vdGlmeV9EYW1hZ2VSZXN1bHQSDQoFSW5kZXgYASAB",
            "KAUSEwoLVGFyZ2V0SW5kZXgYAiABKAUSEAoISXNNaXNzZWQYAyABKAgSDgoG",
            "RGFtYWdlGAQgASgFIk0KC05vdGlmeV9Ecm9wEgwKBEdvbGQYASABKAUSIAoF",
            "SXRlbXMYAiADKAsyES5Qcm90by5QbGF5ZXJJdGVtEg4KBlVzZXJJRBgDIAEo",
            "AyJuChZOb3RpZnlfUGxheWVySm9pblN0YXRlEg4KBlVzZXJJRBgBIAEoAxIP",
            "CgdUaW1lTm93GAIgASgCEgwKBEdvbGQYAyABKAUSJQoHUGFja2FnZRgEIAEo",
            "CzIULlByb3RvLlBsYXllclBhY2thZ2UiTgoTTm90aWZ5X1JlbGVhc2VNYWdp",
            "YxINCgVJbmRleBgBIAEoBRIXCg9DZENvbXBsZXRlZFRpbWUYAiABKAISDwoH",
            "TWFnaWNJRBgDIAEoBSI1ChVOb3RpZnlfQ2hhcmFjdGVyQWxwaGESDQoFSW5k",
            "ZXgYASABKAUSDQoFQWxwaGEYAiABKAIqLgoITW92ZVR5cGUSDgoKTm9ybWFs",
            "TW92ZRAAEggKBEJhY2sQARIICgRKdW1wEAIytAEKCkMyR1NlcnZpY2USLQoF",
            "TG9naW4SEC5Qcm90by5DMkdfTG9naW4aEC5Qcm90by5HMkNfTG9naW4iABI8",
            "CgpDcmVhdGVIZXJvEhUuUHJvdG8uQzJHX0NyZWF0ZUhlcm8aFS5Qcm90by5H",
            "MkNfQ3JlYXRlSGVybyIAEjkKCUJlZ2luR2FtZRIULlByb3RvLkMyR19CZWdp",
            "bkdhbWUaFC5Qcm90by5HMkNfQmVnaW5HYW1lIgAyTQoKTDJHU2VydmljZRI/",
            "CgtCZWdpbkJhdHRsZRIWLlByb3RvLkwyR19CZWdpbkJhdHRsZRoWLlByb3Rv",
            "LkcyTF9CZWdpbkJhdHRsZSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.DataReflection.Descriptor, global::Proto.ConstReflection.Descriptor, global::Proto.ExcelconstReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.MoveType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Void), global::Proto.Void.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2L_Login), global::Proto.C2L_Login.Parser, new[]{ "Version", "UserName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2C_Login), global::Proto.L2C_Login.Parser, new[]{ "Code", "UserID", "Session", "Server" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2L_Reg), global::Proto.C2L_Reg.Parser, new[]{ "Version", "UserName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2C_Reg), global::Proto.L2C_Reg.Parser, new[]{ "Code", "Session", "UserID", "Server" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2G_Login), global::Proto.C2G_Login.Parser, new[]{ "Version", "Session", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2C_Login), global::Proto.G2C_Login.Parser, new[]{ "Code", "Hero", "Package", "Gold", "Coin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2G_CreateHero), global::Proto.C2G_CreateHero.Parser, new[]{ "HeroID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2C_CreateHero), global::Proto.G2C_CreateHero.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2G_BeginGame), global::Proto.C2G_BeginGame.Parser, new[]{ "MapID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2C_BeginGame), global::Proto.G2C_BeginGame.Parser, new[]{ "Code", "ServerInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2B_ExitGame), global::Proto.C2B_ExitGame.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2C_ExitGame), global::Proto.B2C_ExitGame.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Task_G2C_JoinBattle), global::Proto.Task_G2C_JoinBattle.Parser, new[]{ "Server" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2B_JoinBattle), global::Proto.C2B_JoinBattle.Parser, new[]{ "MapID", "Session", "UserID", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2C_JoinBattle), global::Proto.B2C_JoinBattle.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2B_ExitBattle), global::Proto.C2B_ExitBattle.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2C_ExitBattle), global::Proto.B2C_ExitBattle.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2G_GetLastBattle), global::Proto.C2G_GetLastBattle.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2C_GetLastBattle), global::Proto.G2C_GetLastBattle.Parser, new[]{ "Code", "BattleServer", "MapID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_ClickMapGround), global::Proto.Action_ClickMapGround.Parser, new[]{ "TargetPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_ClickSkillIndex), global::Proto.Action_ClickSkillIndex.Parser, new[]{ "MagicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_AutoFindTarget), global::Proto.Action_AutoFindTarget.Parser, new[]{ "Auto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Task_G2C_SyncPackage), global::Proto.Task_G2C_SyncPackage.Parser, new[]{ "Package", "Gold", "Coin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Task_G2C_SyncHero), global::Proto.Task_G2C_SyncHero.Parser, new[]{ "Hero" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2G_OperatorEquip), global::Proto.C2G_OperatorEquip.Parser, new[]{ "HeroID", "Guid", "Part", "IsWear" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2C_OperatorEquip), global::Proto.G2C_OperatorEquip.Parser, new[]{ "Code", "Hero" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2G_SaleItem), global::Proto.C2G_SaleItem.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2C_SaleItem), global::Proto.G2C_SaleItem.Parser, new[]{ "Code", "Diff", "Gold", "Coin" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2G_EquipmentLevelUp), global::Proto.C2G_EquipmentLevelUp.Parser, new[]{ "Guid", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2C_EquipmentLevelUp), global::Proto.G2C_EquipmentLevelUp.Parser, new[]{ "Code", "LevelUp", "Gold", "Coin", "ResultEquip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2G_GMTool), global::Proto.C2G_GMTool.Parser, new[]{ "GMCommand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2C_GMTool), global::Proto.G2C_GMTool.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Task_L2B_StartBattle), global::Proto.Task_L2B_StartBattle.Parser, new[]{ "Users", "MapID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Task_L2B_ExitUser), global::Proto.Task_L2B_ExitUser.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2L_Reg), global::Proto.G2L_Reg.Parser, new[]{ "Version", "Host", "Port", "ServiceHost", "ServicesProt", "ServerID", "MaxPlayer", "CurrentPlayer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2G_Reg), global::Proto.L2G_Reg.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2L_CheckUserSession), global::Proto.G2L_CheckUserSession.Parser, new[]{ "UserID", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2G_CheckUserSession), global::Proto.L2G_CheckUserSession.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2L_BeginBattle), global::Proto.G2L_BeginBattle.Parser, new[]{ "UserID", "MapID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2G_BeginBattle), global::Proto.L2G_BeginBattle.Parser, new[]{ "Code", "BattleServer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2L_GetLastBattle), global::Proto.G2L_GetLastBattle.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2G_GetLastBattle), global::Proto.L2G_GetLastBattle.Parser, new[]{ "Code", "BattleServer", "MapID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2L_RegBattleServer), global::Proto.B2L_RegBattleServer.Parser, new[]{ "Version", "ServicePort", "ServiceHost", "MaxBattleCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2B_RegBattleServer), global::Proto.L2B_RegBattleServer.Parser, new[]{ "Code", "ServiceServerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2L_EndBattle), global::Proto.B2L_EndBattle.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2B_EndBattle), global::Proto.L2B_EndBattle.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2L_CheckSession), global::Proto.B2L_CheckSession.Parser, new[]{ "SessionKey", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2B_CheckSession), global::Proto.L2B_CheckSession.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2G_GetPlayerInfo), global::Proto.B2G_GetPlayerInfo.Parser, new[]{ "UserID", "ServiceServerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2B_GetPlayerInfo), global::Proto.G2B_GetPlayerInfo.Parser, new[]{ "Code", "Hero", "Package" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2G_BattleReward), global::Proto.B2G_BattleReward.Parser, new[]{ "UserID", "Gold", "MapID", "DropItems", "ConsumeItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2B_BattleReward), global::Proto.G2B_BattleReward.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_ElementJoinState), global::Proto.Notify_ElementJoinState.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_ElementExitState), global::Proto.Notify_ElementExitState.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CreateReleaser), global::Proto.Notify_CreateReleaser.Parser, new[]{ "Index", "ReleaserIndex", "TargetIndex", "MagicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CreateBattleCharacter), global::Proto.Notify_CreateBattleCharacter.Parser, new[]{ "Index", "UserID", "ConfigID", "TeamIndex", "Position", "Forward", "Level", "HP", "MP", "Properties", "TDamage", "TDefance", "Category", "Name", "Speed", "Magics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CreateMissile), global::Proto.Notify_CreateMissile.Parser, new[]{ "Index", "ReleaserIndex", "ResourcesPath", "Speed", "Position", "FormBone", "ToBone", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterPosition), global::Proto.Notify_CharacterPosition.Parser, new[]{ "Index", "LastPosition", "TargetPosition", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_LayoutPlayMotion), global::Proto.Notify_LayoutPlayMotion.Parser, new[]{ "Index", "Motion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_LookAtCharacter), global::Proto.Notify_LookAtCharacter.Parser, new[]{ "Own", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_LayoutPlayParticle), global::Proto.Notify_LayoutPlayParticle.Parser, new[]{ "ReleaseIndex", "FromTarget", "ToTarget", "FromBoneName", "ToBoneName", "Bind", "DestoryType", "DestoryTime", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_PropertyValue), global::Proto.Notify_PropertyValue.Parser, new[]{ "Index", "Type", "FinallyValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_HPChange), global::Proto.Notify_HPChange.Parser, new[]{ "Index", "TargetHP", "HP", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_MPChange), global::Proto.Notify_MPChange.Parser, new[]{ "Index", "TargetMP", "MP", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_DamageResult), global::Proto.Notify_DamageResult.Parser, new[]{ "Index", "TargetIndex", "IsMissed", "Damage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_Drop), global::Proto.Notify_Drop.Parser, new[]{ "Gold", "Items", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_PlayerJoinState), global::Proto.Notify_PlayerJoinState.Parser, new[]{ "UserID", "TimeNow", "Gold", "Package" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_ReleaseMagic), global::Proto.Notify_ReleaseMagic.Parser, new[]{ "Index", "CdCompletedTime", "MagicID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterAlpha), global::Proto.Notify_CharacterAlpha.Parser, new[]{ "Index", "Alpha" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MoveType {
    /// <summary>
    ///普通移动
    /// </summary>
    [pbr::OriginalName("NormalMove")] NormalMove = 0,
    /// <summary>
    ///后退
    /// </summary>
    [pbr::OriginalName("Back")] Back = 1,
    /// <summary>
    ///跳跃
    /// </summary>
    [pbr::OriginalName("Jump")] Jump = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Void : pb::IMessage<Void> {
    private static readonly pb::MessageParser<Void> _parser = new pb::MessageParser<Void>(() => new Void());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Void> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void(Void other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void Clone() {
      return new Void(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Void);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Void other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Void other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///登陆
  /// </summary>
  public sealed partial class C2L_Login : pb::IMessage<C2L_Login> {
    private static readonly pb::MessageParser<C2L_Login> _parser = new pb::MessageParser<C2L_Login>(() => new C2L_Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2L_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Login(C2L_Login other) : this() {
      version_ = other.version_;
      userName_ = other.userName_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Login Clone() {
      return new C2L_Login(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///登陆token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2L_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2L_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2L_Login other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登陆返回
  /// </summary>
  public sealed partial class L2C_Login : pb::IMessage<L2C_Login> {
    private static readonly pb::MessageParser<L2C_Login> _parser = new pb::MessageParser<L2C_Login>(() => new L2C_Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2C_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Login(L2C_Login other) : this() {
      code_ = other.code_;
      userID_ = other.userID_;
      session_ = other.session_;
      server_ = other.server_ != null ? other.server_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Login Clone() {
      return new L2C_Login(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 3;
    private string session_ = "";
    /// <summary>
    ///session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Server" field.</summary>
    public const int ServerFieldNumber = 4;
    private global::Proto.GameServerInfo server_;
    /// <summary>
    ///所属服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2C_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2C_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (UserID != other.UserID) return false;
      if (Session != other.Session) return false;
      if (!object.Equals(Server, other.Server)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (server_ != null) hash ^= Server.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (UserID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserID);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Session);
      }
      if (server_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Server);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2C_Login other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::Proto.GameServerInfo();
        }
        Server.MergeFrom(other.Server);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadInt64();
            break;
          }
          case 26: {
            Session = input.ReadString();
            break;
          }
          case 34: {
            if (server_ == null) {
              Server = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(Server);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册用户
  /// </summary>
  public sealed partial class C2L_Reg : pb::IMessage<C2L_Reg> {
    private static readonly pb::MessageParser<C2L_Reg> _parser = new pb::MessageParser<C2L_Reg>(() => new C2L_Reg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2L_Reg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Reg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Reg(C2L_Reg other) : this() {
      version_ = other.version_;
      userName_ = other.userName_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Reg Clone() {
      return new C2L_Reg(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2L_Reg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2L_Reg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2L_Reg other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册返回
  /// </summary>
  public sealed partial class L2C_Reg : pb::IMessage<L2C_Reg> {
    private static readonly pb::MessageParser<L2C_Reg> _parser = new pb::MessageParser<L2C_Reg>(() => new L2C_Reg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2C_Reg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Reg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Reg(L2C_Reg other) : this() {
      code_ = other.code_;
      session_ = other.session_;
      userID_ = other.userID_;
      server_ = other.server_ != null ? other.server_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Reg Clone() {
      return new L2C_Reg(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 2;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "Server" field.</summary>
    public const int ServerFieldNumber = 4;
    private global::Proto.GameServerInfo server_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2C_Reg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2C_Reg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Session != other.Session) return false;
      if (UserID != other.UserID) return false;
      if (!object.Equals(Server, other.Server)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (server_ != null) hash ^= Server.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Session);
      }
      if (UserID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserID);
      }
      if (server_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Server);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2C_Reg other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::Proto.GameServerInfo();
        }
        Server.MergeFrom(other.Server);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            Session = input.ReadString();
            break;
          }
          case 24: {
            UserID = input.ReadInt64();
            break;
          }
          case 34: {
            if (server_ == null) {
              Server = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(Server);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2G_Login : pb::IMessage<C2G_Login> {
    private static readonly pb::MessageParser<C2G_Login> _parser = new pb::MessageParser<C2G_Login>(() => new C2G_Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2G_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_Login(C2G_Login other) : this() {
      version_ = other.version_;
      session_ = other.session_;
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_Login Clone() {
      return new C2G_Login(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 2;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2G_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2G_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Session != other.Session) return false;
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Session);
      }
      if (UserID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2G_Login other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            Session = input.ReadString();
            break;
          }
          case 24: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2C_Login : pb::IMessage<G2C_Login> {
    private static readonly pb::MessageParser<G2C_Login> _parser = new pb::MessageParser<G2C_Login>(() => new G2C_Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Login(G2C_Login other) : this() {
      code_ = other.code_;
      hero_ = other.hero_ != null ? other.hero_.Clone() : null;
      package_ = other.package_ != null ? other.package_.Clone() : null;
      gold_ = other.gold_;
      coin_ = other.coin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_Login Clone() {
      return new G2C_Login(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Hero" field.</summary>
    public const int HeroFieldNumber = 2;
    private global::Proto.DHero hero_;
    /// <summary>
    ///当前角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.DHero Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    /// <summary>Field number for the "Package" field.</summary>
    public const int PackageFieldNumber = 3;
    private global::Proto.PlayerPackage package_;
    /// <summary>
    ///背包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PlayerPackage Package {
      get { return package_; }
      set {
        package_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Coin" field.</summary>
    public const int CoinFieldNumber = 5;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(Hero, other.Hero)) return false;
      if (!object.Equals(Package, other.Package)) return false;
      if (Gold != other.Gold) return false;
      if (Coin != other.Coin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (hero_ != null) hash ^= Hero.GetHashCode();
      if (package_ != null) hash ^= Package.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (hero_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Hero);
      }
      if (package_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Package);
      }
      if (Gold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gold);
      }
      if (Coin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Coin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (hero_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
      }
      if (package_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_Login other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.hero_ != null) {
        if (hero_ == null) {
          Hero = new global::Proto.DHero();
        }
        Hero.MergeFrom(other.Hero);
      }
      if (other.package_ != null) {
        if (package_ == null) {
          Package = new global::Proto.PlayerPackage();
        }
        Package.MergeFrom(other.Package);
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (hero_ == null) {
              Hero = new global::Proto.DHero();
            }
            input.ReadMessage(Hero);
            break;
          }
          case 26: {
            if (package_ == null) {
              Package = new global::Proto.PlayerPackage();
            }
            input.ReadMessage(Package);
            break;
          }
          case 32: {
            Gold = input.ReadInt32();
            break;
          }
          case 40: {
            Coin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建角色
  /// </summary>
  public sealed partial class C2G_CreateHero : pb::IMessage<C2G_CreateHero> {
    private static readonly pb::MessageParser<C2G_CreateHero> _parser = new pb::MessageParser<C2G_CreateHero>(() => new C2G_CreateHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2G_CreateHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_CreateHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_CreateHero(C2G_CreateHero other) : this() {
      heroID_ = other.heroID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_CreateHero Clone() {
      return new C2G_CreateHero(this);
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 1;
    private int heroID_;
    /// <summary>
    ///选择的英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2G_CreateHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2G_CreateHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroID != other.HeroID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroID != 0) hash ^= HeroID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2G_CreateHero other) {
      if (other == null) {
        return;
      }
      if (other.HeroID != 0) {
        HeroID = other.HeroID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建角色
  /// </summary>
  public sealed partial class G2C_CreateHero : pb::IMessage<G2C_CreateHero> {
    private static readonly pb::MessageParser<G2C_CreateHero> _parser = new pb::MessageParser<G2C_CreateHero>(() => new G2C_CreateHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_CreateHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_CreateHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_CreateHero(G2C_CreateHero other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_CreateHero Clone() {
      return new G2C_CreateHero(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_CreateHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_CreateHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_CreateHero other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///开始启动游戏
  /// </summary>
  public sealed partial class C2G_BeginGame : pb::IMessage<C2G_BeginGame> {
    private static readonly pb::MessageParser<C2G_BeginGame> _parser = new pb::MessageParser<C2G_BeginGame>(() => new C2G_BeginGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2G_BeginGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_BeginGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_BeginGame(C2G_BeginGame other) : this() {
      mapID_ = other.mapID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_BeginGame Clone() {
      return new C2G_BeginGame(this);
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 1;
    private int mapID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2G_BeginGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2G_BeginGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapID != other.MapID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2G_BeginGame other) {
      if (other == null) {
        return;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MapID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2C_BeginGame : pb::IMessage<G2C_BeginGame> {
    private static readonly pb::MessageParser<G2C_BeginGame> _parser = new pb::MessageParser<G2C_BeginGame>(() => new G2C_BeginGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_BeginGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_BeginGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_BeginGame(G2C_BeginGame other) : this() {
      code_ = other.code_;
      serverInfo_ = other.serverInfo_ != null ? other.serverInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_BeginGame Clone() {
      return new G2C_BeginGame(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "ServerInfo" field.</summary>
    public const int ServerInfoFieldNumber = 2;
    private global::Proto.GameServerInfo serverInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo ServerInfo {
      get { return serverInfo_; }
      set {
        serverInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_BeginGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_BeginGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(ServerInfo, other.ServerInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (serverInfo_ != null) hash ^= ServerInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (serverInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServerInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (serverInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_BeginGame other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.serverInfo_ != null) {
        if (serverInfo_ == null) {
          ServerInfo = new global::Proto.GameServerInfo();
        }
        ServerInfo.MergeFrom(other.ServerInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (serverInfo_ == null) {
              ServerInfo = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(ServerInfo);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出
  /// </summary>
  public sealed partial class C2B_ExitGame : pb::IMessage<C2B_ExitGame> {
    private static readonly pb::MessageParser<C2B_ExitGame> _parser = new pb::MessageParser<C2B_ExitGame>(() => new C2B_ExitGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_ExitGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitGame(C2B_ExitGame other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitGame Clone() {
      return new C2B_ExitGame(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_ExitGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_ExitGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_ExitGame other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_ExitGame : pb::IMessage<B2C_ExitGame> {
    private static readonly pb::MessageParser<B2C_ExitGame> _parser = new pb::MessageParser<B2C_ExitGame>(() => new B2C_ExitGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_ExitGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitGame(B2C_ExitGame other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitGame Clone() {
      return new B2C_ExitGame(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_ExitGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_ExitGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_ExitGame other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Task_G2C_JoinBattle : pb::IMessage<Task_G2C_JoinBattle> {
    private static readonly pb::MessageParser<Task_G2C_JoinBattle> _parser = new pb::MessageParser<Task_G2C_JoinBattle>(() => new Task_G2C_JoinBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task_G2C_JoinBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_G2C_JoinBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_G2C_JoinBattle(Task_G2C_JoinBattle other) : this() {
      server_ = other.server_ != null ? other.server_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_G2C_JoinBattle Clone() {
      return new Task_G2C_JoinBattle(this);
    }

    /// <summary>Field number for the "Server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::Proto.GameServerInfo server_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task_G2C_JoinBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task_G2C_JoinBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task_G2C_JoinBattle other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::Proto.GameServerInfo();
        }
        Server.MergeFrom(other.Server);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(Server);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_JoinBattle : pb::IMessage<C2B_JoinBattle> {
    private static readonly pb::MessageParser<C2B_JoinBattle> _parser = new pb::MessageParser<C2B_JoinBattle>(() => new C2B_JoinBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_JoinBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_JoinBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_JoinBattle(C2B_JoinBattle other) : this() {
      mapID_ = other.mapID_;
      session_ = other.session_;
      userID_ = other.userID_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_JoinBattle Clone() {
      return new C2B_JoinBattle(this);
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 1;
    private int mapID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 2;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 4;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_JoinBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_JoinBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapID != other.MapID) return false;
      if (Session != other.Session) return false;
      if (UserID != other.UserID) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapID);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Session);
      }
      if (UserID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserID);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_JoinBattle other) {
      if (other == null) {
        return;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MapID = input.ReadInt32();
            break;
          }
          case 18: {
            Session = input.ReadString();
            break;
          }
          case 24: {
            UserID = input.ReadInt64();
            break;
          }
          case 32: {
            Version = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_JoinBattle : pb::IMessage<B2C_JoinBattle> {
    private static readonly pb::MessageParser<B2C_JoinBattle> _parser = new pb::MessageParser<B2C_JoinBattle>(() => new B2C_JoinBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_JoinBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_JoinBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_JoinBattle(B2C_JoinBattle other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_JoinBattle Clone() {
      return new B2C_JoinBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_JoinBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_JoinBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_JoinBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_ExitBattle : pb::IMessage<C2B_ExitBattle> {
    private static readonly pb::MessageParser<C2B_ExitBattle> _parser = new pb::MessageParser<C2B_ExitBattle>(() => new C2B_ExitBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_ExitBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitBattle(C2B_ExitBattle other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitBattle Clone() {
      return new C2B_ExitBattle(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_ExitBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_ExitBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_ExitBattle other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_ExitBattle : pb::IMessage<B2C_ExitBattle> {
    private static readonly pb::MessageParser<B2C_ExitBattle> _parser = new pb::MessageParser<B2C_ExitBattle>(() => new B2C_ExitBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_ExitBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitBattle(B2C_ExitBattle other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitBattle Clone() {
      return new B2C_ExitBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_ExitBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_ExitBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_ExitBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取最后一个战斗服务器
  /// </summary>
  public sealed partial class C2G_GetLastBattle : pb::IMessage<C2G_GetLastBattle> {
    private static readonly pb::MessageParser<C2G_GetLastBattle> _parser = new pb::MessageParser<C2G_GetLastBattle>(() => new C2G_GetLastBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2G_GetLastBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_GetLastBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_GetLastBattle(C2G_GetLastBattle other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_GetLastBattle Clone() {
      return new C2G_GetLastBattle(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2G_GetLastBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2G_GetLastBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2G_GetLastBattle other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2C_GetLastBattle : pb::IMessage<G2C_GetLastBattle> {
    private static readonly pb::MessageParser<G2C_GetLastBattle> _parser = new pb::MessageParser<G2C_GetLastBattle>(() => new G2C_GetLastBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_GetLastBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_GetLastBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_GetLastBattle(G2C_GetLastBattle other) : this() {
      code_ = other.code_;
      battleServer_ = other.battleServer_ != null ? other.battleServer_.Clone() : null;
      mapID_ = other.mapID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_GetLastBattle Clone() {
      return new G2C_GetLastBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "BattleServer" field.</summary>
    public const int BattleServerFieldNumber = 2;
    private global::Proto.GameServerInfo battleServer_;
    /// <summary>
    ///当前战斗服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo BattleServer {
      get { return battleServer_; }
      set {
        battleServer_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 3;
    private int mapID_;
    /// <summary>
    ///地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_GetLastBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_GetLastBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(BattleServer, other.BattleServer)) return false;
      if (MapID != other.MapID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (battleServer_ != null) hash ^= BattleServer.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (battleServer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleServer);
      }
      if (MapID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (battleServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleServer);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_GetLastBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.battleServer_ != null) {
        if (battleServer_ == null) {
          BattleServer = new global::Proto.GameServerInfo();
        }
        BattleServer.MergeFrom(other.BattleServer);
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (battleServer_ == null) {
              BattleServer = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(BattleServer);
            break;
          }
          case 24: {
            MapID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///点击移动
  /// </summary>
  public sealed partial class Action_ClickMapGround : pb::IMessage<Action_ClickMapGround> {
    private static readonly pb::MessageParser<Action_ClickMapGround> _parser = new pb::MessageParser<Action_ClickMapGround>(() => new Action_ClickMapGround());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_ClickMapGround> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickMapGround() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickMapGround(Action_ClickMapGround other) : this() {
      targetPosition_ = other.targetPosition_ != null ? other.targetPosition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickMapGround Clone() {
      return new Action_ClickMapGround(this);
    }

    /// <summary>Field number for the "TargetPosition" field.</summary>
    public const int TargetPositionFieldNumber = 1;
    private global::Proto.Vector3 targetPosition_;
    /// <summary>
    ///点击的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 TargetPosition {
      get { return targetPosition_; }
      set {
        targetPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_ClickMapGround);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_ClickMapGround other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TargetPosition, other.TargetPosition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetPosition_ != null) hash ^= TargetPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetPosition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TargetPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_ClickMapGround other) {
      if (other == null) {
        return;
      }
      if (other.targetPosition_ != null) {
        if (targetPosition_ == null) {
          TargetPosition = new global::Proto.Vector3();
        }
        TargetPosition.MergeFrom(other.TargetPosition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (targetPosition_ == null) {
              TargetPosition = new global::Proto.Vector3();
            }
            input.ReadMessage(TargetPosition);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///点击释放技能
  /// </summary>
  public sealed partial class Action_ClickSkillIndex : pb::IMessage<Action_ClickSkillIndex> {
    private static readonly pb::MessageParser<Action_ClickSkillIndex> _parser = new pb::MessageParser<Action_ClickSkillIndex>(() => new Action_ClickSkillIndex());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_ClickSkillIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickSkillIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickSkillIndex(Action_ClickSkillIndex other) : this() {
      magicKey_ = other.magicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickSkillIndex Clone() {
      return new Action_ClickSkillIndex(this);
    }

    /// <summary>Field number for the "MagicKey" field.</summary>
    public const int MagicKeyFieldNumber = 1;
    private string magicKey_ = "";
    /// <summary>
    ///技能Key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicKey {
      get { return magicKey_; }
      set {
        magicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_ClickSkillIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_ClickSkillIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MagicKey != other.MagicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MagicKey.Length != 0) hash ^= MagicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MagicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MagicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MagicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MagicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_ClickSkillIndex other) {
      if (other == null) {
        return;
      }
      if (other.MagicKey.Length != 0) {
        MagicKey = other.MagicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MagicKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///自动寻敌
  /// </summary>
  public sealed partial class Action_AutoFindTarget : pb::IMessage<Action_AutoFindTarget> {
    private static readonly pb::MessageParser<Action_AutoFindTarget> _parser = new pb::MessageParser<Action_AutoFindTarget>(() => new Action_AutoFindTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_AutoFindTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_AutoFindTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_AutoFindTarget(Action_AutoFindTarget other) : this() {
      auto_ = other.auto_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_AutoFindTarget Clone() {
      return new Action_AutoFindTarget(this);
    }

    /// <summary>Field number for the "Auto" field.</summary>
    public const int AutoFieldNumber = 1;
    private bool auto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Auto {
      get { return auto_; }
      set {
        auto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_AutoFindTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_AutoFindTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Auto != other.Auto) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Auto != false) hash ^= Auto.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Auto != false) {
        output.WriteRawTag(8);
        output.WriteBool(Auto);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Auto != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_AutoFindTarget other) {
      if (other == null) {
        return;
      }
      if (other.Auto != false) {
        Auto = other.Auto;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Auto = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步包裹
  /// </summary>
  public sealed partial class Task_G2C_SyncPackage : pb::IMessage<Task_G2C_SyncPackage> {
    private static readonly pb::MessageParser<Task_G2C_SyncPackage> _parser = new pb::MessageParser<Task_G2C_SyncPackage>(() => new Task_G2C_SyncPackage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task_G2C_SyncPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_G2C_SyncPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_G2C_SyncPackage(Task_G2C_SyncPackage other) : this() {
      package_ = other.package_ != null ? other.package_.Clone() : null;
      gold_ = other.gold_;
      coin_ = other.coin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_G2C_SyncPackage Clone() {
      return new Task_G2C_SyncPackage(this);
    }

    /// <summary>Field number for the "Package" field.</summary>
    public const int PackageFieldNumber = 1;
    private global::Proto.PlayerPackage package_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PlayerPackage Package {
      get { return package_; }
      set {
        package_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Coin" field.</summary>
    public const int CoinFieldNumber = 3;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task_G2C_SyncPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task_G2C_SyncPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Package, other.Package)) return false;
      if (Gold != other.Gold) return false;
      if (Coin != other.Coin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (package_ != null) hash ^= Package.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (package_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Package);
      }
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gold);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (package_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task_G2C_SyncPackage other) {
      if (other == null) {
        return;
      }
      if (other.package_ != null) {
        if (package_ == null) {
          Package = new global::Proto.PlayerPackage();
        }
        Package.MergeFrom(other.Package);
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (package_ == null) {
              Package = new global::Proto.PlayerPackage();
            }
            input.ReadMessage(Package);
            break;
          }
          case 16: {
            Gold = input.ReadInt32();
            break;
          }
          case 24: {
            Coin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同步角色
  /// </summary>
  public sealed partial class Task_G2C_SyncHero : pb::IMessage<Task_G2C_SyncHero> {
    private static readonly pb::MessageParser<Task_G2C_SyncHero> _parser = new pb::MessageParser<Task_G2C_SyncHero>(() => new Task_G2C_SyncHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task_G2C_SyncHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_G2C_SyncHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_G2C_SyncHero(Task_G2C_SyncHero other) : this() {
      hero_ = other.hero_ != null ? other.hero_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_G2C_SyncHero Clone() {
      return new Task_G2C_SyncHero(this);
    }

    /// <summary>Field number for the "Hero" field.</summary>
    public const int HeroFieldNumber = 1;
    private global::Proto.DHero hero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.DHero Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task_G2C_SyncHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task_G2C_SyncHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hero, other.Hero)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hero_ != null) hash ^= Hero.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hero_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hero);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hero_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task_G2C_SyncHero other) {
      if (other == null) {
        return;
      }
      if (other.hero_ != null) {
        if (hero_ == null) {
          Hero = new global::Proto.DHero();
        }
        Hero.MergeFrom(other.Hero);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hero_ == null) {
              Hero = new global::Proto.DHero();
            }
            input.ReadMessage(Hero);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///处理装备穿戴
  /// </summary>
  public sealed partial class C2G_OperatorEquip : pb::IMessage<C2G_OperatorEquip> {
    private static readonly pb::MessageParser<C2G_OperatorEquip> _parser = new pb::MessageParser<C2G_OperatorEquip>(() => new C2G_OperatorEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2G_OperatorEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_OperatorEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_OperatorEquip(C2G_OperatorEquip other) : this() {
      heroID_ = other.heroID_;
      guid_ = other.guid_;
      part_ = other.part_;
      isWear_ = other.isWear_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_OperatorEquip Clone() {
      return new C2G_OperatorEquip(this);
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 1;
    private long heroID_;
    /// <summary>
    ///英雄ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    /// <summary>Field number for the "Guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private string guid_ = "";
    /// <summary>
    ///装备guid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Part" field.</summary>
    public const int PartFieldNumber = 3;
    private global::Proto.EquipmentType part_ = 0;
    /// <summary>
    ///部位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.EquipmentType Part {
      get { return part_; }
      set {
        part_ = value;
      }
    }

    /// <summary>Field number for the "IsWear" field.</summary>
    public const int IsWearFieldNumber = 4;
    private bool isWear_;
    /// <summary>
    ///是否是穿戴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWear {
      get { return isWear_; }
      set {
        isWear_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2G_OperatorEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2G_OperatorEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroID != other.HeroID) return false;
      if (Guid != other.Guid) return false;
      if (Part != other.Part) return false;
      if (IsWear != other.IsWear) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroID != 0L) hash ^= HeroID.GetHashCode();
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Part != 0) hash ^= Part.GetHashCode();
      if (IsWear != false) hash ^= IsWear.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(HeroID);
      }
      if (Guid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Guid);
      }
      if (Part != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Part);
      }
      if (IsWear != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsWear);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeroID);
      }
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Part != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Part);
      }
      if (IsWear != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2G_OperatorEquip other) {
      if (other == null) {
        return;
      }
      if (other.HeroID != 0L) {
        HeroID = other.HeroID;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Part != 0) {
        Part = other.Part;
      }
      if (other.IsWear != false) {
        IsWear = other.IsWear;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroID = input.ReadInt64();
            break;
          }
          case 18: {
            Guid = input.ReadString();
            break;
          }
          case 24: {
            Part = (global::Proto.EquipmentType) input.ReadEnum();
            break;
          }
          case 32: {
            IsWear = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///处理穿戴装备
  /// </summary>
  public sealed partial class G2C_OperatorEquip : pb::IMessage<G2C_OperatorEquip> {
    private static readonly pb::MessageParser<G2C_OperatorEquip> _parser = new pb::MessageParser<G2C_OperatorEquip>(() => new G2C_OperatorEquip());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_OperatorEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_OperatorEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_OperatorEquip(G2C_OperatorEquip other) : this() {
      code_ = other.code_;
      hero_ = other.hero_ != null ? other.hero_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_OperatorEquip Clone() {
      return new G2C_OperatorEquip(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Hero" field.</summary>
    public const int HeroFieldNumber = 2;
    private global::Proto.DHero hero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.DHero Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_OperatorEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_OperatorEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(Hero, other.Hero)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (hero_ != null) hash ^= Hero.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (hero_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Hero);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (hero_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_OperatorEquip other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.hero_ != null) {
        if (hero_ == null) {
          Hero = new global::Proto.DHero();
        }
        Hero.MergeFrom(other.Hero);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (hero_ == null) {
              Hero = new global::Proto.DHero();
            }
            input.ReadMessage(Hero);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2G_SaleItem : pb::IMessage<C2G_SaleItem> {
    private static readonly pb::MessageParser<C2G_SaleItem> _parser = new pb::MessageParser<C2G_SaleItem>(() => new C2G_SaleItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2G_SaleItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_SaleItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_SaleItem(C2G_SaleItem other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_SaleItem Clone() {
      return new C2G_SaleItem(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.SaleItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.SaleItem.Parser);
    private readonly pbc::RepeatedField<global::Proto.SaleItem> items_ = new pbc::RepeatedField<global::Proto.SaleItem>();
    /// <summary>
    ///需要出售的道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.SaleItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2G_SaleItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2G_SaleItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2G_SaleItem other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2C_SaleItem : pb::IMessage<G2C_SaleItem> {
    private static readonly pb::MessageParser<G2C_SaleItem> _parser = new pb::MessageParser<G2C_SaleItem>(() => new G2C_SaleItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_SaleItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_SaleItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_SaleItem(G2C_SaleItem other) : this() {
      code_ = other.code_;
      diff_ = other.diff_.Clone();
      gold_ = other.gold_;
      coin_ = other.coin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_SaleItem Clone() {
      return new G2C_SaleItem(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Diff" field.</summary>
    public const int DiffFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.PlayerItem> _repeated_diff_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.PlayerItem.Parser);
    private readonly pbc::RepeatedField<global::Proto.PlayerItem> diff_ = new pbc::RepeatedField<global::Proto.PlayerItem>();
    /// <summary>
    ///道具变更信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PlayerItem> Diff {
      get { return diff_; }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private int gold_;
    /// <summary>
    ///金币最终值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Coin" field.</summary>
    public const int CoinFieldNumber = 4;
    private int coin_;
    /// <summary>
    ///钻石最终值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_SaleItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_SaleItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if(!diff_.Equals(other.diff_)) return false;
      if (Gold != other.Gold) return false;
      if (Coin != other.Coin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      hash ^= diff_.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      diff_.WriteTo(output, _repeated_diff_codec);
      if (Gold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gold);
      }
      if (Coin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Coin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      size += diff_.CalculateSize(_repeated_diff_codec);
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_SaleItem other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      diff_.Add(other.diff_);
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            diff_.AddEntriesFrom(input, _repeated_diff_codec);
            break;
          }
          case 24: {
            Gold = input.ReadInt32();
            break;
          }
          case 32: {
            Coin = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备升级 ＋
  /// </summary>
  public sealed partial class C2G_EquipmentLevelUp : pb::IMessage<C2G_EquipmentLevelUp> {
    private static readonly pb::MessageParser<C2G_EquipmentLevelUp> _parser = new pb::MessageParser<C2G_EquipmentLevelUp>(() => new C2G_EquipmentLevelUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2G_EquipmentLevelUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_EquipmentLevelUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_EquipmentLevelUp(C2G_EquipmentLevelUp other) : this() {
      guid_ = other.guid_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_EquipmentLevelUp Clone() {
      return new C2G_EquipmentLevelUp(this);
    }

    /// <summary>Field number for the "Guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2G_EquipmentLevelUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2G_EquipmentLevelUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2G_EquipmentLevelUp other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///装备升级
  /// </summary>
  public sealed partial class G2C_EquipmentLevelUp : pb::IMessage<G2C_EquipmentLevelUp> {
    private static readonly pb::MessageParser<G2C_EquipmentLevelUp> _parser = new pb::MessageParser<G2C_EquipmentLevelUp>(() => new G2C_EquipmentLevelUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_EquipmentLevelUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_EquipmentLevelUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_EquipmentLevelUp(G2C_EquipmentLevelUp other) : this() {
      code_ = other.code_;
      levelUp_ = other.levelUp_;
      gold_ = other.gold_;
      coin_ = other.coin_;
      resultEquip_ = other.resultEquip_ != null ? other.resultEquip_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_EquipmentLevelUp Clone() {
      return new G2C_EquipmentLevelUp(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "LevelUp" field.</summary>
    public const int LevelUpFieldNumber = 2;
    private bool levelUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LevelUp {
      get { return levelUp_; }
      set {
        levelUp_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private int gold_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Coin" field.</summary>
    public const int CoinFieldNumber = 4;
    private int coin_;
    /// <summary>
    ///钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "ResultEquip" field.</summary>
    public const int ResultEquipFieldNumber = 5;
    private global::Proto.Equip resultEquip_;
    /// <summary>
    ///装备刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Equip ResultEquip {
      get { return resultEquip_; }
      set {
        resultEquip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_EquipmentLevelUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_EquipmentLevelUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (LevelUp != other.LevelUp) return false;
      if (Gold != other.Gold) return false;
      if (Coin != other.Coin) return false;
      if (!object.Equals(ResultEquip, other.ResultEquip)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (LevelUp != false) hash ^= LevelUp.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (resultEquip_ != null) hash ^= ResultEquip.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (LevelUp != false) {
        output.WriteRawTag(16);
        output.WriteBool(LevelUp);
      }
      if (Gold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gold);
      }
      if (Coin != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Coin);
      }
      if (resultEquip_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ResultEquip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (LevelUp != false) {
        size += 1 + 1;
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (resultEquip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResultEquip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_EquipmentLevelUp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.LevelUp != false) {
        LevelUp = other.LevelUp;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.resultEquip_ != null) {
        if (resultEquip_ == null) {
          ResultEquip = new global::Proto.Equip();
        }
        ResultEquip.MergeFrom(other.ResultEquip);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            LevelUp = input.ReadBool();
            break;
          }
          case 24: {
            Gold = input.ReadInt32();
            break;
          }
          case 32: {
            Coin = input.ReadInt32();
            break;
          }
          case 42: {
            if (resultEquip_ == null) {
              ResultEquip = new global::Proto.Equip();
            }
            input.ReadMessage(ResultEquip);
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2G_GMTool : pb::IMessage<C2G_GMTool> {
    private static readonly pb::MessageParser<C2G_GMTool> _parser = new pb::MessageParser<C2G_GMTool>(() => new C2G_GMTool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2G_GMTool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_GMTool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_GMTool(C2G_GMTool other) : this() {
      gMCommand_ = other.gMCommand_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2G_GMTool Clone() {
      return new C2G_GMTool(this);
    }

    /// <summary>Field number for the "GMCommand" field.</summary>
    public const int GMCommandFieldNumber = 1;
    private string gMCommand_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GMCommand {
      get { return gMCommand_; }
      set {
        gMCommand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2G_GMTool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2G_GMTool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GMCommand != other.GMCommand) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GMCommand.Length != 0) hash ^= GMCommand.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GMCommand.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GMCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GMCommand.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GMCommand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2G_GMTool other) {
      if (other == null) {
        return;
      }
      if (other.GMCommand.Length != 0) {
        GMCommand = other.GMCommand;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            GMCommand = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2C_GMTool : pb::IMessage<G2C_GMTool> {
    private static readonly pb::MessageParser<G2C_GMTool> _parser = new pb::MessageParser<G2C_GMTool>(() => new G2C_GMTool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2C_GMTool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_GMTool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_GMTool(G2C_GMTool other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2C_GMTool Clone() {
      return new G2C_GMTool(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2C_GMTool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2C_GMTool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2C_GMTool other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///派发启动战斗副本任务
  /// </summary>
  public sealed partial class Task_L2B_StartBattle : pb::IMessage<Task_L2B_StartBattle> {
    private static readonly pb::MessageParser<Task_L2B_StartBattle> _parser = new pb::MessageParser<Task_L2B_StartBattle>(() => new Task_L2B_StartBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task_L2B_StartBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2B_StartBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2B_StartBattle(Task_L2B_StartBattle other) : this() {
      users_ = other.users_.Clone();
      mapID_ = other.mapID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2B_StartBattle Clone() {
      return new Task_L2B_StartBattle(this);
    }

    /// <summary>Field number for the "Users" field.</summary>
    public const int UsersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Proto.PlayerServerInfo> _repeated_users_codec
        = pb::FieldCodec.ForMessage(10, global::Proto.PlayerServerInfo.Parser);
    private readonly pbc::RepeatedField<global::Proto.PlayerServerInfo> users_ = new pbc::RepeatedField<global::Proto.PlayerServerInfo>();
    /// <summary>
    ///启动userID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PlayerServerInfo> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 2;
    private int mapID_;
    /// <summary>
    ///启动地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task_L2B_StartBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task_L2B_StartBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!users_.Equals(other.users_)) return false;
      if (MapID != other.MapID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= users_.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      users_.WriteTo(output, _repeated_users_codec);
      if (MapID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += users_.CalculateSize(_repeated_users_codec);
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task_L2B_StartBattle other) {
      if (other == null) {
        return;
      }
      users_.Add(other.users_);
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 16: {
            MapID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出玩家
  /// </summary>
  public sealed partial class Task_L2B_ExitUser : pb::IMessage<Task_L2B_ExitUser> {
    private static readonly pb::MessageParser<Task_L2B_ExitUser> _parser = new pb::MessageParser<Task_L2B_ExitUser>(() => new Task_L2B_ExitUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task_L2B_ExitUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2B_ExitUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2B_ExitUser(Task_L2B_ExitUser other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2B_ExitUser Clone() {
      return new Task_L2B_ExitUser(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task_L2B_ExitUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task_L2B_ExitUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task_L2B_ExitUser other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器注册
  /// </summary>
  public sealed partial class G2L_Reg : pb::IMessage<G2L_Reg> {
    private static readonly pb::MessageParser<G2L_Reg> _parser = new pb::MessageParser<G2L_Reg>(() => new G2L_Reg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_Reg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_Reg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_Reg(G2L_Reg other) : this() {
      version_ = other.version_;
      host_ = other.host_;
      port_ = other.port_;
      serviceHost_ = other.serviceHost_;
      servicesProt_ = other.servicesProt_;
      serverID_ = other.serverID_;
      maxPlayer_ = other.maxPlayer_;
      currentPlayer_ = other.currentPlayer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_Reg Clone() {
      return new G2L_Reg(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    ///当前版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "Host" field.</summary>
    public const int HostFieldNumber = 2;
    private string host_ = "";
    /// <summary>
    ///服务器IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    /// <summary>
    ///服务器端口 公开
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "ServiceHost" field.</summary>
    public const int ServiceHostFieldNumber = 4;
    private string serviceHost_ = "";
    /// <summary>
    ///内部访问IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceHost {
      get { return serviceHost_; }
      set {
        serviceHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServicesProt" field.</summary>
    public const int ServicesProtFieldNumber = 5;
    private int servicesProt_;
    /// <summary>
    ///内部服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServicesProt {
      get { return servicesProt_; }
      set {
        servicesProt_ = value;
      }
    }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 6;
    private int serverID_;
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 7;
    private int maxPlayer_;
    /// <summary>
    ///服务器最大玩家数 数据库最大支持玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "CurrentPlayer" field.</summary>
    public const int CurrentPlayerFieldNumber = 8;
    private int currentPlayer_;
    /// <summary>
    ///当前玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPlayer {
      get { return currentPlayer_; }
      set {
        currentPlayer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_Reg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_Reg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (ServiceHost != other.ServiceHost) return false;
      if (ServicesProt != other.ServicesProt) return false;
      if (ServerID != other.ServerID) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if (CurrentPlayer != other.CurrentPlayer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ServiceHost.Length != 0) hash ^= ServiceHost.GetHashCode();
      if (ServicesProt != 0) hash ^= ServicesProt.GetHashCode();
      if (ServerID != 0) hash ^= ServerID.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (CurrentPlayer != 0) hash ^= CurrentPlayer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      if (ServiceHost.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServiceHost);
      }
      if (ServicesProt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServicesProt);
      }
      if (ServerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ServerID);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxPlayer);
      }
      if (CurrentPlayer != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrentPlayer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ServiceHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceHost);
      }
      if (ServicesProt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServicesProt);
      }
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
      }
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      if (CurrentPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_Reg other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ServiceHost.Length != 0) {
        ServiceHost = other.ServiceHost;
      }
      if (other.ServicesProt != 0) {
        ServicesProt = other.ServicesProt;
      }
      if (other.ServerID != 0) {
        ServerID = other.ServerID;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.CurrentPlayer != 0) {
        CurrentPlayer = other.CurrentPlayer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            Host = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
          case 34: {
            ServiceHost = input.ReadString();
            break;
          }
          case 40: {
            ServicesProt = input.ReadInt32();
            break;
          }
          case 48: {
            ServerID = input.ReadInt32();
            break;
          }
          case 56: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 64: {
            CurrentPlayer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器返回
  /// </summary>
  public sealed partial class L2G_Reg : pb::IMessage<L2G_Reg> {
    private static readonly pb::MessageParser<L2G_Reg> _parser = new pb::MessageParser<L2G_Reg>(() => new L2G_Reg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_Reg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_Reg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_Reg(L2G_Reg other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_Reg Clone() {
      return new L2G_Reg(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_Reg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_Reg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_Reg other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///检查session是否有效
  /// </summary>
  public sealed partial class G2L_CheckUserSession : pb::IMessage<G2L_CheckUserSession> {
    private static readonly pb::MessageParser<G2L_CheckUserSession> _parser = new pb::MessageParser<G2L_CheckUserSession>(() => new G2L_CheckUserSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_CheckUserSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_CheckUserSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_CheckUserSession(G2L_CheckUserSession other) : this() {
      userID_ = other.userID_;
      session_ = other.session_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_CheckUserSession Clone() {
      return new G2L_CheckUserSession(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 2;
    private string session_ = "";
    /// <summary>
    ///当前登陆信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_CheckUserSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_CheckUserSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Session != other.Session) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Session);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_CheckUserSession other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 18: {
            Session = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回检查session结果
  /// </summary>
  public sealed partial class L2G_CheckUserSession : pb::IMessage<L2G_CheckUserSession> {
    private static readonly pb::MessageParser<L2G_CheckUserSession> _parser = new pb::MessageParser<L2G_CheckUserSession>(() => new L2G_CheckUserSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_CheckUserSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_CheckUserSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_CheckUserSession(L2G_CheckUserSession other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_CheckUserSession Clone() {
      return new L2G_CheckUserSession(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_CheckUserSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_CheckUserSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_CheckUserSession other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///启动一个战斗仿真
  /// </summary>
  public sealed partial class G2L_BeginBattle : pb::IMessage<G2L_BeginBattle> {
    private static readonly pb::MessageParser<G2L_BeginBattle> _parser = new pb::MessageParser<G2L_BeginBattle>(() => new G2L_BeginBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_BeginBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_BeginBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_BeginBattle(G2L_BeginBattle other) : this() {
      userID_ = other.userID_;
      mapID_ = other.mapID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_BeginBattle Clone() {
      return new G2L_BeginBattle(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///发起请求的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 2;
    private int mapID_;
    /// <summary>
    ///仿真地图MapID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_BeginBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_BeginBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (MapID != other.MapID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (MapID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_BeginBattle other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            MapID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///启动返回
  /// </summary>
  public sealed partial class L2G_BeginBattle : pb::IMessage<L2G_BeginBattle> {
    private static readonly pb::MessageParser<L2G_BeginBattle> _parser = new pb::MessageParser<L2G_BeginBattle>(() => new L2G_BeginBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_BeginBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_BeginBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_BeginBattle(L2G_BeginBattle other) : this() {
      code_ = other.code_;
      battleServer_ = other.battleServer_ != null ? other.battleServer_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_BeginBattle Clone() {
      return new L2G_BeginBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "BattleServer" field.</summary>
    public const int BattleServerFieldNumber = 2;
    private global::Proto.GameServerInfo battleServer_;
    /// <summary>
    ///当前战斗服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo BattleServer {
      get { return battleServer_; }
      set {
        battleServer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_BeginBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_BeginBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(BattleServer, other.BattleServer)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (battleServer_ != null) hash ^= BattleServer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (battleServer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleServer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (battleServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleServer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_BeginBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.battleServer_ != null) {
        if (battleServer_ == null) {
          BattleServer = new global::Proto.GameServerInfo();
        }
        BattleServer.MergeFrom(other.BattleServer);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (battleServer_ == null) {
              BattleServer = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(BattleServer);
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2L_GetLastBattle : pb::IMessage<G2L_GetLastBattle> {
    private static readonly pb::MessageParser<G2L_GetLastBattle> _parser = new pb::MessageParser<G2L_GetLastBattle>(() => new G2L_GetLastBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_GetLastBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetLastBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetLastBattle(G2L_GetLastBattle other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetLastBattle Clone() {
      return new G2L_GetLastBattle(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_GetLastBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_GetLastBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_GetLastBattle other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class L2G_GetLastBattle : pb::IMessage<L2G_GetLastBattle> {
    private static readonly pb::MessageParser<L2G_GetLastBattle> _parser = new pb::MessageParser<L2G_GetLastBattle>(() => new L2G_GetLastBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_GetLastBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetLastBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetLastBattle(L2G_GetLastBattle other) : this() {
      code_ = other.code_;
      battleServer_ = other.battleServer_ != null ? other.battleServer_.Clone() : null;
      mapID_ = other.mapID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetLastBattle Clone() {
      return new L2G_GetLastBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "BattleServer" field.</summary>
    public const int BattleServerFieldNumber = 2;
    private global::Proto.GameServerInfo battleServer_;
    /// <summary>
    ///当前战斗服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo BattleServer {
      get { return battleServer_; }
      set {
        battleServer_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 3;
    private int mapID_;
    /// <summary>
    ///地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_GetLastBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_GetLastBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(BattleServer, other.BattleServer)) return false;
      if (MapID != other.MapID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (battleServer_ != null) hash ^= BattleServer.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (battleServer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleServer);
      }
      if (MapID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (battleServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleServer);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_GetLastBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.battleServer_ != null) {
        if (battleServer_ == null) {
          BattleServer = new global::Proto.GameServerInfo();
        }
        BattleServer.MergeFrom(other.BattleServer);
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (battleServer_ == null) {
              BattleServer = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(BattleServer);
            break;
          }
          case 24: {
            MapID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册一个战斗服务器
  /// </summary>
  public sealed partial class B2L_RegBattleServer : pb::IMessage<B2L_RegBattleServer> {
    private static readonly pb::MessageParser<B2L_RegBattleServer> _parser = new pb::MessageParser<B2L_RegBattleServer>(() => new B2L_RegBattleServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2L_RegBattleServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_RegBattleServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_RegBattleServer(B2L_RegBattleServer other) : this() {
      version_ = other.version_;
      servicePort_ = other.servicePort_;
      serviceHost_ = other.serviceHost_;
      maxBattleCount_ = other.maxBattleCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_RegBattleServer Clone() {
      return new B2L_RegBattleServer(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    ///当前版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "ServicePort" field.</summary>
    public const int ServicePortFieldNumber = 2;
    private int servicePort_;
    /// <summary>
    ///服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServicePort {
      get { return servicePort_; }
      set {
        servicePort_ = value;
      }
    }

    /// <summary>Field number for the "ServiceHost" field.</summary>
    public const int ServiceHostFieldNumber = 3;
    private string serviceHost_ = "";
    /// <summary>
    ///服务器IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceHost {
      get { return serviceHost_; }
      set {
        serviceHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxBattleCount" field.</summary>
    public const int MaxBattleCountFieldNumber = 4;
    private int maxBattleCount_;
    /// <summary>
    ///最大战斗仿真上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxBattleCount {
      get { return maxBattleCount_; }
      set {
        maxBattleCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2L_RegBattleServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2L_RegBattleServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (ServicePort != other.ServicePort) return false;
      if (ServiceHost != other.ServiceHost) return false;
      if (MaxBattleCount != other.MaxBattleCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (ServicePort != 0) hash ^= ServicePort.GetHashCode();
      if (ServiceHost.Length != 0) hash ^= ServiceHost.GetHashCode();
      if (MaxBattleCount != 0) hash ^= MaxBattleCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (ServicePort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServicePort);
      }
      if (ServiceHost.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceHost);
      }
      if (MaxBattleCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxBattleCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (ServicePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServicePort);
      }
      if (ServiceHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceHost);
      }
      if (MaxBattleCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxBattleCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2L_RegBattleServer other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.ServicePort != 0) {
        ServicePort = other.ServicePort;
      }
      if (other.ServiceHost.Length != 0) {
        ServiceHost = other.ServiceHost;
      }
      if (other.MaxBattleCount != 0) {
        MaxBattleCount = other.MaxBattleCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            ServicePort = input.ReadInt32();
            break;
          }
          case 26: {
            ServiceHost = input.ReadString();
            break;
          }
          case 32: {
            MaxBattleCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册返回
  /// </summary>
  public sealed partial class L2B_RegBattleServer : pb::IMessage<L2B_RegBattleServer> {
    private static readonly pb::MessageParser<L2B_RegBattleServer> _parser = new pb::MessageParser<L2B_RegBattleServer>(() => new L2B_RegBattleServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2B_RegBattleServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_RegBattleServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_RegBattleServer(L2B_RegBattleServer other) : this() {
      code_ = other.code_;
      serviceServerID_ = other.serviceServerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_RegBattleServer Clone() {
      return new L2B_RegBattleServer(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    /// <summary>
    ///返回码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "ServiceServerID" field.</summary>
    public const int ServiceServerIDFieldNumber = 2;
    private int serviceServerID_;
    /// <summary>
    ///中心服务器（登陆服务器）给的当前服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceServerID {
      get { return serviceServerID_; }
      set {
        serviceServerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2B_RegBattleServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2B_RegBattleServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (ServiceServerID != other.ServiceServerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (ServiceServerID != 0) hash ^= ServiceServerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (ServiceServerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServiceServerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (ServiceServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServiceServerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2B_RegBattleServer other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.ServiceServerID != 0) {
        ServiceServerID = other.ServiceServerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            ServiceServerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家完成战斗
  /// </summary>
  public sealed partial class B2L_EndBattle : pb::IMessage<B2L_EndBattle> {
    private static readonly pb::MessageParser<B2L_EndBattle> _parser = new pb::MessageParser<B2L_EndBattle>(() => new B2L_EndBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2L_EndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_EndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_EndBattle(B2L_EndBattle other) : this() {
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_EndBattle Clone() {
      return new B2L_EndBattle(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2L_EndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2L_EndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2L_EndBattle other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家完成战斗
  /// </summary>
  public sealed partial class L2B_EndBattle : pb::IMessage<L2B_EndBattle> {
    private static readonly pb::MessageParser<L2B_EndBattle> _parser = new pb::MessageParser<L2B_EndBattle>(() => new L2B_EndBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2B_EndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_EndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_EndBattle(L2B_EndBattle other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_EndBattle Clone() {
      return new L2B_EndBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2B_EndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2B_EndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2B_EndBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2L_CheckSession : pb::IMessage<B2L_CheckSession> {
    private static readonly pb::MessageParser<B2L_CheckSession> _parser = new pb::MessageParser<B2L_CheckSession>(() => new B2L_CheckSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2L_CheckSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_CheckSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_CheckSession(B2L_CheckSession other) : this() {
      sessionKey_ = other.sessionKey_;
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_CheckSession Clone() {
      return new B2L_CheckSession(this);
    }

    /// <summary>Field number for the "SessionKey" field.</summary>
    public const int SessionKeyFieldNumber = 1;
    private string sessionKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionKey {
      get { return sessionKey_; }
      set {
        sessionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2L_CheckSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2L_CheckSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionKey != other.SessionKey) return false;
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionKey.Length != 0) hash ^= SessionKey.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionKey);
      }
      if (UserID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionKey);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2L_CheckSession other) {
      if (other == null) {
        return;
      }
      if (other.SessionKey.Length != 0) {
        SessionKey = other.SessionKey;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SessionKey = input.ReadString();
            break;
          }
          case 16: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class L2B_CheckSession : pb::IMessage<L2B_CheckSession> {
    private static readonly pb::MessageParser<L2B_CheckSession> _parser = new pb::MessageParser<L2B_CheckSession>(() => new L2B_CheckSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2B_CheckSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_CheckSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_CheckSession(L2B_CheckSession other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_CheckSession Clone() {
      return new L2B_CheckSession(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2B_CheckSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2B_CheckSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2B_CheckSession other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求获得玩家信息
  /// </summary>
  public sealed partial class B2G_GetPlayerInfo : pb::IMessage<B2G_GetPlayerInfo> {
    private static readonly pb::MessageParser<B2G_GetPlayerInfo> _parser = new pb::MessageParser<B2G_GetPlayerInfo>(() => new B2G_GetPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2G_GetPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2G_GetPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2G_GetPlayerInfo(B2G_GetPlayerInfo other) : this() {
      userID_ = other.userID_;
      serviceServerID_ = other.serviceServerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2G_GetPlayerInfo Clone() {
      return new B2G_GetPlayerInfo(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///当前用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "ServiceServerID" field.</summary>
    public const int ServiceServerIDFieldNumber = 2;
    private int serviceServerID_;
    /// <summary>
    ///当前战斗服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceServerID {
      get { return serviceServerID_; }
      set {
        serviceServerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2G_GetPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2G_GetPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (ServiceServerID != other.ServiceServerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (ServiceServerID != 0) hash ^= ServiceServerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (ServiceServerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServiceServerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (ServiceServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServiceServerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2G_GetPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.ServiceServerID != 0) {
        ServiceServerID = other.ServiceServerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            ServiceServerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求玩家信息返回
  /// </summary>
  public sealed partial class G2B_GetPlayerInfo : pb::IMessage<G2B_GetPlayerInfo> {
    private static readonly pb::MessageParser<G2B_GetPlayerInfo> _parser = new pb::MessageParser<G2B_GetPlayerInfo>(() => new G2B_GetPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2B_GetPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2B_GetPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2B_GetPlayerInfo(G2B_GetPlayerInfo other) : this() {
      code_ = other.code_;
      hero_ = other.hero_ != null ? other.hero_.Clone() : null;
      package_ = other.package_ != null ? other.package_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2B_GetPlayerInfo Clone() {
      return new G2B_GetPlayerInfo(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    /// <summary>
    ///返回信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Hero" field.</summary>
    public const int HeroFieldNumber = 2;
    private global::Proto.DHero hero_;
    /// <summary>
    ///英雄数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.DHero Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    /// <summary>Field number for the "Package" field.</summary>
    public const int PackageFieldNumber = 3;
    private global::Proto.PlayerPackage package_;
    /// <summary>
    ///道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PlayerPackage Package {
      get { return package_; }
      set {
        package_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2B_GetPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2B_GetPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(Hero, other.Hero)) return false;
      if (!object.Equals(Package, other.Package)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (hero_ != null) hash ^= Hero.GetHashCode();
      if (package_ != null) hash ^= Package.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (hero_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Hero);
      }
      if (package_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Package);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (hero_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
      }
      if (package_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2B_GetPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.hero_ != null) {
        if (hero_ == null) {
          Hero = new global::Proto.DHero();
        }
        Hero.MergeFrom(other.Hero);
      }
      if (other.package_ != null) {
        if (package_ == null) {
          Package = new global::Proto.PlayerPackage();
        }
        Package.MergeFrom(other.Package);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (hero_ == null) {
              Hero = new global::Proto.DHero();
            }
            input.ReadMessage(Hero);
            break;
          }
          case 26: {
            if (package_ == null) {
              Package = new global::Proto.PlayerPackage();
            }
            input.ReadMessage(Package);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回战斗数据
  /// </summary>
  public sealed partial class B2G_BattleReward : pb::IMessage<B2G_BattleReward> {
    private static readonly pb::MessageParser<B2G_BattleReward> _parser = new pb::MessageParser<B2G_BattleReward>(() => new B2G_BattleReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2G_BattleReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2G_BattleReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2G_BattleReward(B2G_BattleReward other) : this() {
      userID_ = other.userID_;
      gold_ = other.gold_;
      mapID_ = other.mapID_;
      dropItems_ = other.dropItems_.Clone();
      consumeItems_ = other.consumeItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2G_BattleReward Clone() {
      return new B2G_BattleReward(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private int gold_;
    /// <summary>
    ///用户金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 3;
    private int mapID_;
    /// <summary>
    ///当前战斗地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "DropItems" field.</summary>
    public const int DropItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto.PlayerItem> _repeated_dropItems_codec
        = pb::FieldCodec.ForMessage(34, global::Proto.PlayerItem.Parser);
    private readonly pbc::RepeatedField<global::Proto.PlayerItem> dropItems_ = new pbc::RepeatedField<global::Proto.PlayerItem>();
    /// <summary>
    ///掉落物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PlayerItem> DropItems {
      get { return dropItems_; }
    }

    /// <summary>Field number for the "ConsumeItems" field.</summary>
    public const int ConsumeItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.PlayerItem> _repeated_consumeItems_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.PlayerItem.Parser);
    private readonly pbc::RepeatedField<global::Proto.PlayerItem> consumeItems_ = new pbc::RepeatedField<global::Proto.PlayerItem>();
    /// <summary>
    ///消耗道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PlayerItem> ConsumeItems {
      get { return consumeItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2G_BattleReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2G_BattleReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Gold != other.Gold) return false;
      if (MapID != other.MapID) return false;
      if(!dropItems_.Equals(other.dropItems_)) return false;
      if(!consumeItems_.Equals(other.consumeItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      hash ^= dropItems_.GetHashCode();
      hash ^= consumeItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gold);
      }
      if (MapID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MapID);
      }
      dropItems_.WriteTo(output, _repeated_dropItems_codec);
      consumeItems_.WriteTo(output, _repeated_consumeItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      size += dropItems_.CalculateSize(_repeated_dropItems_codec);
      size += consumeItems_.CalculateSize(_repeated_consumeItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2G_BattleReward other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      dropItems_.Add(other.dropItems_);
      consumeItems_.Add(other.consumeItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 16: {
            Gold = input.ReadInt32();
            break;
          }
          case 24: {
            MapID = input.ReadInt32();
            break;
          }
          case 34: {
            dropItems_.AddEntriesFrom(input, _repeated_dropItems_codec);
            break;
          }
          case 42: {
            consumeItems_.AddEntriesFrom(input, _repeated_consumeItems_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回战斗数据
  /// </summary>
  public sealed partial class G2B_BattleReward : pb::IMessage<G2B_BattleReward> {
    private static readonly pb::MessageParser<G2B_BattleReward> _parser = new pb::MessageParser<G2B_BattleReward>(() => new G2B_BattleReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2B_BattleReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2B_BattleReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2B_BattleReward(G2B_BattleReward other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2B_BattleReward Clone() {
      return new G2B_BattleReward(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2B_BattleReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2B_BattleReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2B_BattleReward other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///元素进入场景
  /// </summary>
  public sealed partial class Notify_ElementJoinState : pb::IMessage<Notify_ElementJoinState> {
    private static readonly pb::MessageParser<Notify_ElementJoinState> _parser = new pb::MessageParser<Notify_ElementJoinState>(() => new Notify_ElementJoinState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_ElementJoinState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementJoinState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementJoinState(Notify_ElementJoinState other) : this() {
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementJoinState Clone() {
      return new Notify_ElementJoinState(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_ElementJoinState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_ElementJoinState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_ElementJoinState other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///元素退出场景
  /// </summary>
  public sealed partial class Notify_ElementExitState : pb::IMessage<Notify_ElementExitState> {
    private static readonly pb::MessageParser<Notify_ElementExitState> _parser = new pb::MessageParser<Notify_ElementExitState>(() => new Notify_ElementExitState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_ElementExitState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementExitState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementExitState(Notify_ElementExitState other) : this() {
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementExitState Clone() {
      return new Notify_ElementExitState(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_ElementExitState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_ElementExitState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_ElementExitState other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建一个释放者
  /// </summary>
  public sealed partial class Notify_CreateReleaser : pb::IMessage<Notify_CreateReleaser> {
    private static readonly pb::MessageParser<Notify_CreateReleaser> _parser = new pb::MessageParser<Notify_CreateReleaser>(() => new Notify_CreateReleaser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CreateReleaser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateReleaser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateReleaser(Notify_CreateReleaser other) : this() {
      index_ = other.index_;
      releaserIndex_ = other.releaserIndex_;
      targetIndex_ = other.targetIndex_;
      magicKey_ = other.magicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateReleaser Clone() {
      return new Notify_CreateReleaser(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "ReleaserIndex" field.</summary>
    public const int ReleaserIndexFieldNumber = 2;
    private int releaserIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReleaserIndex {
      get { return releaserIndex_; }
      set {
        releaserIndex_ = value;
      }
    }

    /// <summary>Field number for the "TargetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 3;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "MagicKey" field.</summary>
    public const int MagicKeyFieldNumber = 4;
    private string magicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicKey {
      get { return magicKey_; }
      set {
        magicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CreateReleaser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CreateReleaser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (ReleaserIndex != other.ReleaserIndex) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (MagicKey != other.MagicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (ReleaserIndex != 0) hash ^= ReleaserIndex.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (MagicKey.Length != 0) hash ^= MagicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (ReleaserIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReleaserIndex);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetIndex);
      }
      if (MagicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MagicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ReleaserIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaserIndex);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (MagicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MagicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CreateReleaser other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.ReleaserIndex != 0) {
        ReleaserIndex = other.ReleaserIndex;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.MagicKey.Length != 0) {
        MagicKey = other.MagicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            ReleaserIndex = input.ReadInt32();
            break;
          }
          case 24: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 34: {
            MagicKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗中的角色
  /// </summary>
  public sealed partial class Notify_CreateBattleCharacter : pb::IMessage<Notify_CreateBattleCharacter> {
    private static readonly pb::MessageParser<Notify_CreateBattleCharacter> _parser = new pb::MessageParser<Notify_CreateBattleCharacter>(() => new Notify_CreateBattleCharacter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CreateBattleCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateBattleCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateBattleCharacter(Notify_CreateBattleCharacter other) : this() {
      index_ = other.index_;
      userID_ = other.userID_;
      configID_ = other.configID_;
      teamIndex_ = other.teamIndex_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      forward_ = other.forward_ != null ? other.forward_.Clone() : null;
      level_ = other.level_;
      hP_ = other.hP_;
      mP_ = other.mP_;
      properties_ = other.properties_.Clone();
      tDamage_ = other.tDamage_;
      tDefance_ = other.tDefance_;
      category_ = other.category_;
      name_ = other.name_;
      speed_ = other.speed_;
      magics_ = other.magics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateBattleCharacter Clone() {
      return new Notify_CreateBattleCharacter(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private long userID_;
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "ConfigID" field.</summary>
    public const int ConfigIDFieldNumber = 3;
    private int configID_;
    /// <summary>
    ///配表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "TeamIndex" field.</summary>
    public const int TeamIndexFieldNumber = 4;
    private int teamIndex_;
    /// <summary>
    ///阵营ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamIndex {
      get { return teamIndex_; }
      set {
        teamIndex_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Proto.Vector3 position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Forward" field.</summary>
    public const int ForwardFieldNumber = 6;
    private global::Proto.Vector3 forward_;
    /// <summary>
    ///朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 7;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 8;
    private int hP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 9;
    private int mP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "Properties" field.</summary>
    public const int PropertiesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Proto.HeroProperty> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(82, global::Proto.HeroProperty.Parser);
    private readonly pbc::RepeatedField<global::Proto.HeroProperty> properties_ = new pbc::RepeatedField<global::Proto.HeroProperty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.HeroProperty> Properties {
      get { return properties_; }
    }

    /// <summary>Field number for the "TDamage" field.</summary>
    public const int TDamageFieldNumber = 11;
    private global::Proto.DamageType tDamage_ = 0;
    /// <summary>
    ///伤害类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.DamageType TDamage {
      get { return tDamage_; }
      set {
        tDamage_ = value;
      }
    }

    /// <summary>Field number for the "TDefance" field.</summary>
    public const int TDefanceFieldNumber = 12;
    private global::Proto.DefanceType tDefance_ = 0;
    /// <summary>
    ///防御类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.DefanceType TDefance {
      get { return tDefance_; }
      set {
        tDefance_ = value;
      }
    }

    /// <summary>Field number for the "Category" field.</summary>
    public const int CategoryFieldNumber = 13;
    private global::Proto.HeroCategory category_ = 0;
    /// <summary>
    ///英雄类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.HeroCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 14;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 15;
    private float speed_;
    /// <summary>
    ///移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Magics" field.</summary>
    public const int MagicsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Proto.HeroMagicData> _repeated_magics_codec
        = pb::FieldCodec.ForMessage(130, global::Proto.HeroMagicData.Parser);
    private readonly pbc::RepeatedField<global::Proto.HeroMagicData> magics_ = new pbc::RepeatedField<global::Proto.HeroMagicData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.HeroMagicData> Magics {
      get { return magics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CreateBattleCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CreateBattleCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (UserID != other.UserID) return false;
      if (ConfigID != other.ConfigID) return false;
      if (TeamIndex != other.TeamIndex) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      if (Level != other.Level) return false;
      if (HP != other.HP) return false;
      if (MP != other.MP) return false;
      if(!properties_.Equals(other.properties_)) return false;
      if (TDamage != other.TDamage) return false;
      if (TDefance != other.TDefance) return false;
      if (Category != other.Category) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if(!magics_.Equals(other.magics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      if (TeamIndex != 0) hash ^= TeamIndex.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (forward_ != null) hash ^= Forward.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (TDamage != 0) hash ^= TDamage.GetHashCode();
      if (TDefance != 0) hash ^= TDefance.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      hash ^= magics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (UserID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserID);
      }
      if (ConfigID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ConfigID);
      }
      if (TeamIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TeamIndex);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (forward_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Forward);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (HP != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HP);
      }
      if (MP != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MP);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (TDamage != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) TDamage);
      }
      if (TDefance != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) TDefance);
      }
      if (Category != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) Category);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (Speed != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Speed);
      }
      magics_.WriteTo(output, _repeated_magics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      if (TeamIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIndex);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (forward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (TDamage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TDamage);
      }
      if (TDefance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TDefance);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      size += magics_.CalculateSize(_repeated_magics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CreateBattleCharacter other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.TeamIndex != 0) {
        TeamIndex = other.TeamIndex;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.forward_ != null) {
        if (forward_ == null) {
          Forward = new global::Proto.Vector3();
        }
        Forward.MergeFrom(other.Forward);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      properties_.Add(other.properties_);
      if (other.TDamage != 0) {
        TDamage = other.TDamage;
      }
      if (other.TDefance != 0) {
        TDefance = other.TDefance;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      magics_.Add(other.magics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            UserID = input.ReadInt64();
            break;
          }
          case 24: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 32: {
            TeamIndex = input.ReadInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Proto.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 50: {
            if (forward_ == null) {
              Forward = new global::Proto.Vector3();
            }
            input.ReadMessage(Forward);
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 64: {
            HP = input.ReadInt32();
            break;
          }
          case 72: {
            MP = input.ReadInt32();
            break;
          }
          case 82: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
          case 88: {
            TDamage = (global::Proto.DamageType) input.ReadEnum();
            break;
          }
          case 96: {
            TDefance = (global::Proto.DefanceType) input.ReadEnum();
            break;
          }
          case 104: {
            Category = (global::Proto.HeroCategory) input.ReadEnum();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 125: {
            Speed = input.ReadFloat();
            break;
          }
          case 130: {
            magics_.AddEntriesFrom(input, _repeated_magics_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建一个飞行物
  /// </summary>
  public sealed partial class Notify_CreateMissile : pb::IMessage<Notify_CreateMissile> {
    private static readonly pb::MessageParser<Notify_CreateMissile> _parser = new pb::MessageParser<Notify_CreateMissile>(() => new Notify_CreateMissile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CreateMissile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateMissile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateMissile(Notify_CreateMissile other) : this() {
      index_ = other.index_;
      releaserIndex_ = other.releaserIndex_;
      resourcesPath_ = other.resourcesPath_;
      speed_ = other.speed_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      formBone_ = other.formBone_;
      toBone_ = other.toBone_;
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateMissile Clone() {
      return new Notify_CreateMissile(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "ReleaserIndex" field.</summary>
    public const int ReleaserIndexFieldNumber = 2;
    private int releaserIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReleaserIndex {
      get { return releaserIndex_; }
      set {
        releaserIndex_ = value;
      }
    }

    /// <summary>Field number for the "ResourcesPath" field.</summary>
    public const int ResourcesPathFieldNumber = 3;
    private string resourcesPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcesPath {
      get { return resourcesPath_; }
      set {
        resourcesPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private float speed_;
    /// <summary>
    ///速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "formBone" field.</summary>
    public const int FormBoneFieldNumber = 6;
    private string formBone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FormBone {
      get { return formBone_; }
      set {
        formBone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toBone" field.</summary>
    public const int ToBoneFieldNumber = 7;
    private string toBone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToBone {
      get { return toBone_; }
      set {
        toBone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 8;
    private global::Proto.Vector3 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CreateMissile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CreateMissile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (ReleaserIndex != other.ReleaserIndex) return false;
      if (ResourcesPath != other.ResourcesPath) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (FormBone != other.FormBone) return false;
      if (ToBone != other.ToBone) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (ReleaserIndex != 0) hash ^= ReleaserIndex.GetHashCode();
      if (ResourcesPath.Length != 0) hash ^= ResourcesPath.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (position_ != null) hash ^= Position.GetHashCode();
      if (FormBone.Length != 0) hash ^= FormBone.GetHashCode();
      if (ToBone.Length != 0) hash ^= ToBone.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (ReleaserIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReleaserIndex);
      }
      if (ResourcesPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResourcesPath);
      }
      if (Speed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (FormBone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FormBone);
      }
      if (ToBone.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ToBone);
      }
      if (offset_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ReleaserIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaserIndex);
      }
      if (ResourcesPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcesPath);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (FormBone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FormBone);
      }
      if (ToBone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToBone);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CreateMissile other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.ReleaserIndex != 0) {
        ReleaserIndex = other.ReleaserIndex;
      }
      if (other.ResourcesPath.Length != 0) {
        ResourcesPath = other.ResourcesPath;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.FormBone.Length != 0) {
        FormBone = other.FormBone;
      }
      if (other.ToBone.Length != 0) {
        ToBone = other.ToBone;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Proto.Vector3();
        }
        Offset.MergeFrom(other.Offset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            ReleaserIndex = input.ReadInt32();
            break;
          }
          case 26: {
            ResourcesPath = input.ReadString();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
          case 42: {
            if (position_ == null) {
              Position = new global::Proto.Vector3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 50: {
            FormBone = input.ReadString();
            break;
          }
          case 58: {
            ToBone = input.ReadString();
            break;
          }
          case 66: {
            if (offset_ == null) {
              Offset = new global::Proto.Vector3();
            }
            input.ReadMessage(Offset);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterPosition : pb::IMessage<Notify_CharacterPosition> {
    private static readonly pb::MessageParser<Notify_CharacterPosition> _parser = new pb::MessageParser<Notify_CharacterPosition>(() => new Notify_CharacterPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPosition(Notify_CharacterPosition other) : this() {
      index_ = other.index_;
      lastPosition_ = other.lastPosition_ != null ? other.lastPosition_.Clone() : null;
      targetPosition_ = other.targetPosition_ != null ? other.targetPosition_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPosition Clone() {
      return new Notify_CharacterPosition(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "LastPosition" field.</summary>
    public const int LastPositionFieldNumber = 2;
    private global::Proto.Vector3 lastPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 LastPosition {
      get { return lastPosition_; }
      set {
        lastPosition_ = value;
      }
    }

    /// <summary>Field number for the "TargetPosition" field.</summary>
    public const int TargetPositionFieldNumber = 3;
    private global::Proto.Vector3 targetPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 TargetPosition {
      get { return targetPosition_; }
      set {
        targetPosition_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Proto.MoveType type_ = 0;
    /// <summary>
    ///移动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MoveType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(LastPosition, other.LastPosition)) return false;
      if (!object.Equals(TargetPosition, other.TargetPosition)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (lastPosition_ != null) hash ^= LastPosition.GetHashCode();
      if (targetPosition_ != null) hash ^= TargetPosition.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (lastPosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LastPosition);
      }
      if (targetPosition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TargetPosition);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (lastPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastPosition);
      }
      if (targetPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPosition);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterPosition other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.lastPosition_ != null) {
        if (lastPosition_ == null) {
          LastPosition = new global::Proto.Vector3();
        }
        LastPosition.MergeFrom(other.LastPosition);
      }
      if (other.targetPosition_ != null) {
        if (targetPosition_ == null) {
          TargetPosition = new global::Proto.Vector3();
        }
        TargetPosition.MergeFrom(other.TargetPosition);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (lastPosition_ == null) {
              LastPosition = new global::Proto.Vector3();
            }
            input.ReadMessage(LastPosition);
            break;
          }
          case 26: {
            if (targetPosition_ == null) {
              TargetPosition = new global::Proto.Vector3();
            }
            input.ReadMessage(TargetPosition);
            break;
          }
          case 32: {
            Type = (global::Proto.MoveType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_LayoutPlayMotion : pb::IMessage<Notify_LayoutPlayMotion> {
    private static readonly pb::MessageParser<Notify_LayoutPlayMotion> _parser = new pb::MessageParser<Notify_LayoutPlayMotion>(() => new Notify_LayoutPlayMotion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_LayoutPlayMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LayoutPlayMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LayoutPlayMotion(Notify_LayoutPlayMotion other) : this() {
      index_ = other.index_;
      motion_ = other.motion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LayoutPlayMotion Clone() {
      return new Notify_LayoutPlayMotion(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Motion" field.</summary>
    public const int MotionFieldNumber = 2;
    private string motion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Motion {
      get { return motion_; }
      set {
        motion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_LayoutPlayMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_LayoutPlayMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Motion != other.Motion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Motion.Length != 0) hash ^= Motion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Motion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Motion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Motion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Motion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_LayoutPlayMotion other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Motion.Length != 0) {
        Motion = other.Motion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Motion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_LookAtCharacter : pb::IMessage<Notify_LookAtCharacter> {
    private static readonly pb::MessageParser<Notify_LookAtCharacter> _parser = new pb::MessageParser<Notify_LookAtCharacter>(() => new Notify_LookAtCharacter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_LookAtCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LookAtCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LookAtCharacter(Notify_LookAtCharacter other) : this() {
      own_ = other.own_;
      target_ = other.target_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LookAtCharacter Clone() {
      return new Notify_LookAtCharacter(this);
    }

    /// <summary>Field number for the "Own" field.</summary>
    public const int OwnFieldNumber = 1;
    private int own_;
    /// <summary>
    ///源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Own {
      get { return own_; }
      set {
        own_ = value;
      }
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 2;
    private int target_;
    /// <summary>
    ///目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_LookAtCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_LookAtCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Own != other.Own) return false;
      if (Target != other.Target) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Own != 0) hash ^= Own.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Own != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Own);
      }
      if (Target != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Own != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Own);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_LookAtCharacter other) {
      if (other == null) {
        return;
      }
      if (other.Own != 0) {
        Own = other.Own;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Own = input.ReadInt32();
            break;
          }
          case 16: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_LayoutPlayParticle : pb::IMessage<Notify_LayoutPlayParticle> {
    private static readonly pb::MessageParser<Notify_LayoutPlayParticle> _parser = new pb::MessageParser<Notify_LayoutPlayParticle>(() => new Notify_LayoutPlayParticle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_LayoutPlayParticle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LayoutPlayParticle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LayoutPlayParticle(Notify_LayoutPlayParticle other) : this() {
      releaseIndex_ = other.releaseIndex_;
      fromTarget_ = other.fromTarget_;
      toTarget_ = other.toTarget_;
      fromBoneName_ = other.fromBoneName_;
      toBoneName_ = other.toBoneName_;
      bind_ = other.bind_;
      destoryType_ = other.destoryType_;
      destoryTime_ = other.destoryTime_;
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LayoutPlayParticle Clone() {
      return new Notify_LayoutPlayParticle(this);
    }

    /// <summary>Field number for the "ReleaseIndex" field.</summary>
    public const int ReleaseIndexFieldNumber = 1;
    private int releaseIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReleaseIndex {
      get { return releaseIndex_; }
      set {
        releaseIndex_ = value;
      }
    }

    /// <summary>Field number for the "FromTarget" field.</summary>
    public const int FromTargetFieldNumber = 2;
    private int fromTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromTarget {
      get { return fromTarget_; }
      set {
        fromTarget_ = value;
      }
    }

    /// <summary>Field number for the "ToTarget" field.</summary>
    public const int ToTargetFieldNumber = 3;
    private int toTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToTarget {
      get { return toTarget_; }
      set {
        toTarget_ = value;
      }
    }

    /// <summary>Field number for the "FromBoneName" field.</summary>
    public const int FromBoneNameFieldNumber = 4;
    private string fromBoneName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromBoneName {
      get { return fromBoneName_; }
      set {
        fromBoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToBoneName" field.</summary>
    public const int ToBoneNameFieldNumber = 5;
    private string toBoneName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToBoneName {
      get { return toBoneName_; }
      set {
        toBoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Bind" field.</summary>
    public const int BindFieldNumber = 6;
    private bool bind_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bind {
      get { return bind_; }
      set {
        bind_ = value;
      }
    }

    /// <summary>Field number for the "DestoryType" field.</summary>
    public const int DestoryTypeFieldNumber = 7;
    private int destoryType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestoryType {
      get { return destoryType_; }
      set {
        destoryType_ = value;
      }
    }

    /// <summary>Field number for the "DestoryTime" field.</summary>
    public const int DestoryTimeFieldNumber = 8;
    private float destoryTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DestoryTime {
      get { return destoryTime_; }
      set {
        destoryTime_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 9;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_LayoutPlayParticle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_LayoutPlayParticle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReleaseIndex != other.ReleaseIndex) return false;
      if (FromTarget != other.FromTarget) return false;
      if (ToTarget != other.ToTarget) return false;
      if (FromBoneName != other.FromBoneName) return false;
      if (ToBoneName != other.ToBoneName) return false;
      if (Bind != other.Bind) return false;
      if (DestoryType != other.DestoryType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DestoryTime, other.DestoryTime)) return false;
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReleaseIndex != 0) hash ^= ReleaseIndex.GetHashCode();
      if (FromTarget != 0) hash ^= FromTarget.GetHashCode();
      if (ToTarget != 0) hash ^= ToTarget.GetHashCode();
      if (FromBoneName.Length != 0) hash ^= FromBoneName.GetHashCode();
      if (ToBoneName.Length != 0) hash ^= ToBoneName.GetHashCode();
      if (Bind != false) hash ^= Bind.GetHashCode();
      if (DestoryType != 0) hash ^= DestoryType.GetHashCode();
      if (DestoryTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DestoryTime);
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReleaseIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReleaseIndex);
      }
      if (FromTarget != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FromTarget);
      }
      if (ToTarget != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ToTarget);
      }
      if (FromBoneName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FromBoneName);
      }
      if (ToBoneName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ToBoneName);
      }
      if (Bind != false) {
        output.WriteRawTag(48);
        output.WriteBool(Bind);
      }
      if (DestoryType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(DestoryType);
      }
      if (DestoryTime != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DestoryTime);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReleaseIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaseIndex);
      }
      if (FromTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromTarget);
      }
      if (ToTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToTarget);
      }
      if (FromBoneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromBoneName);
      }
      if (ToBoneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToBoneName);
      }
      if (Bind != false) {
        size += 1 + 1;
      }
      if (DestoryType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestoryType);
      }
      if (DestoryTime != 0F) {
        size += 1 + 4;
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_LayoutPlayParticle other) {
      if (other == null) {
        return;
      }
      if (other.ReleaseIndex != 0) {
        ReleaseIndex = other.ReleaseIndex;
      }
      if (other.FromTarget != 0) {
        FromTarget = other.FromTarget;
      }
      if (other.ToTarget != 0) {
        ToTarget = other.ToTarget;
      }
      if (other.FromBoneName.Length != 0) {
        FromBoneName = other.FromBoneName;
      }
      if (other.ToBoneName.Length != 0) {
        ToBoneName = other.ToBoneName;
      }
      if (other.Bind != false) {
        Bind = other.Bind;
      }
      if (other.DestoryType != 0) {
        DestoryType = other.DestoryType;
      }
      if (other.DestoryTime != 0F) {
        DestoryTime = other.DestoryTime;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReleaseIndex = input.ReadInt32();
            break;
          }
          case 16: {
            FromTarget = input.ReadInt32();
            break;
          }
          case 24: {
            ToTarget = input.ReadInt32();
            break;
          }
          case 34: {
            FromBoneName = input.ReadString();
            break;
          }
          case 42: {
            ToBoneName = input.ReadString();
            break;
          }
          case 48: {
            Bind = input.ReadBool();
            break;
          }
          case 56: {
            DestoryType = input.ReadInt32();
            break;
          }
          case 69: {
            DestoryTime = input.ReadFloat();
            break;
          }
          case 74: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///属性修改
  /// </summary>
  public sealed partial class Notify_PropertyValue : pb::IMessage<Notify_PropertyValue> {
    private static readonly pb::MessageParser<Notify_PropertyValue> _parser = new pb::MessageParser<Notify_PropertyValue>(() => new Notify_PropertyValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_PropertyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PropertyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PropertyValue(Notify_PropertyValue other) : this() {
      index_ = other.index_;
      type_ = other.type_;
      finallyValue_ = other.finallyValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PropertyValue Clone() {
      return new Notify_PropertyValue(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Proto.HeroPropertyType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.HeroPropertyType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "FinallyValue" field.</summary>
    public const int FinallyValueFieldNumber = 3;
    private int finallyValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinallyValue {
      get { return finallyValue_; }
      set {
        finallyValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_PropertyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_PropertyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Type != other.Type) return false;
      if (FinallyValue != other.FinallyValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (FinallyValue != 0) hash ^= FinallyValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (FinallyValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FinallyValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (FinallyValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinallyValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_PropertyValue other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.FinallyValue != 0) {
        FinallyValue = other.FinallyValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Type = (global::Proto.HeroPropertyType) input.ReadEnum();
            break;
          }
          case 24: {
            FinallyValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///广播血量变化
  /// </summary>
  public sealed partial class Notify_HPChange : pb::IMessage<Notify_HPChange> {
    private static readonly pb::MessageParser<Notify_HPChange> _parser = new pb::MessageParser<Notify_HPChange>(() => new Notify_HPChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_HPChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_HPChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_HPChange(Notify_HPChange other) : this() {
      index_ = other.index_;
      targetHP_ = other.targetHP_;
      hP_ = other.hP_;
      max_ = other.max_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_HPChange Clone() {
      return new Notify_HPChange(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "TargetHP" field.</summary>
    public const int TargetHPFieldNumber = 2;
    private int targetHP_;
    /// <summary>
    ///最终HP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetHP {
      get { return targetHP_; }
      set {
        targetHP_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 3;
    private int hP_;
    /// <summary>
    ///HP变化值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "Max" field.</summary>
    public const int MaxFieldNumber = 4;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_HPChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_HPChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (TargetHP != other.TargetHP) return false;
      if (HP != other.HP) return false;
      if (Max != other.Max) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (TargetHP != 0) hash ^= TargetHP.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (TargetHP != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetHP);
      }
      if (HP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HP);
      }
      if (Max != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (TargetHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetHP);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_HPChange other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.TargetHP != 0) {
        TargetHP = other.TargetHP;
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            TargetHP = input.ReadInt32();
            break;
          }
          case 24: {
            HP = input.ReadInt32();
            break;
          }
          case 32: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_MPChange : pb::IMessage<Notify_MPChange> {
    private static readonly pb::MessageParser<Notify_MPChange> _parser = new pb::MessageParser<Notify_MPChange>(() => new Notify_MPChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_MPChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_MPChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_MPChange(Notify_MPChange other) : this() {
      index_ = other.index_;
      targetMP_ = other.targetMP_;
      mP_ = other.mP_;
      max_ = other.max_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_MPChange Clone() {
      return new Notify_MPChange(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "TargetMP" field.</summary>
    public const int TargetMPFieldNumber = 2;
    private int targetMP_;
    /// <summary>
    ///最终MP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetMP {
      get { return targetMP_; }
      set {
        targetMP_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 3;
    private int mP_;
    /// <summary>
    ///MP变化值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "Max" field.</summary>
    public const int MaxFieldNumber = 4;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_MPChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_MPChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (TargetMP != other.TargetMP) return false;
      if (MP != other.MP) return false;
      if (Max != other.Max) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (TargetMP != 0) hash ^= TargetMP.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (TargetMP != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetMP);
      }
      if (MP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MP);
      }
      if (Max != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (TargetMP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetMP);
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_MPChange other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.TargetMP != 0) {
        TargetMP = other.TargetMP;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            TargetMP = input.ReadInt32();
            break;
          }
          case 24: {
            MP = input.ReadInt32();
            break;
          }
          case 32: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_DamageResult : pb::IMessage<Notify_DamageResult> {
    private static readonly pb::MessageParser<Notify_DamageResult> _parser = new pb::MessageParser<Notify_DamageResult>(() => new Notify_DamageResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_DamageResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DamageResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DamageResult(Notify_DamageResult other) : this() {
      index_ = other.index_;
      targetIndex_ = other.targetIndex_;
      isMissed_ = other.isMissed_;
      damage_ = other.damage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DamageResult Clone() {
      return new Notify_DamageResult(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "TargetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 2;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "IsMissed" field.</summary>
    public const int IsMissedFieldNumber = 3;
    private bool isMissed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMissed {
      get { return isMissed_; }
      set {
        isMissed_ = value;
      }
    }

    /// <summary>Field number for the "Damage" field.</summary>
    public const int DamageFieldNumber = 4;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_DamageResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_DamageResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (IsMissed != other.IsMissed) return false;
      if (Damage != other.Damage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (IsMissed != false) hash ^= IsMissed.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetIndex);
      }
      if (IsMissed != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsMissed);
      }
      if (Damage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Damage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (IsMissed != false) {
        size += 1 + 1;
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_DamageResult other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.IsMissed != false) {
        IsMissed = other.IsMissed;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 24: {
            IsMissed = input.ReadBool();
            break;
          }
          case 32: {
            Damage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_Drop : pb::IMessage<Notify_Drop> {
    private static readonly pb::MessageParser<Notify_Drop> _parser = new pb::MessageParser<Notify_Drop>(() => new Notify_Drop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_Drop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Drop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Drop(Notify_Drop other) : this() {
      gold_ = other.gold_;
      items_ = other.items_.Clone();
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Drop Clone() {
      return new Notify_Drop(this);
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Proto.PlayerItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Proto.PlayerItem.Parser);
    private readonly pbc::RepeatedField<global::Proto.PlayerItem> items_ = new pbc::RepeatedField<global::Proto.PlayerItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PlayerItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_Drop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_Drop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      if(!items_.Equals(other.items_)) return false;
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0) hash ^= Gold.GetHashCode();
      hash ^= items_.GetHashCode();
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gold);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (UserID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_Drop other) {
      if (other == null) {
        return;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      items_.Add(other.items_);
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Gold = input.ReadInt32();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 24: {
            UserID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_PlayerJoinState : pb::IMessage<Notify_PlayerJoinState> {
    private static readonly pb::MessageParser<Notify_PlayerJoinState> _parser = new pb::MessageParser<Notify_PlayerJoinState>(() => new Notify_PlayerJoinState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_PlayerJoinState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayerJoinState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayerJoinState(Notify_PlayerJoinState other) : this() {
      userID_ = other.userID_;
      timeNow_ = other.timeNow_;
      gold_ = other.gold_;
      package_ = other.package_ != null ? other.package_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayerJoinState Clone() {
      return new Notify_PlayerJoinState(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private long userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "TimeNow" field.</summary>
    public const int TimeNowFieldNumber = 2;
    private float timeNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeNow {
      get { return timeNow_; }
      set {
        timeNow_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Package" field.</summary>
    public const int PackageFieldNumber = 4;
    private global::Proto.PlayerPackage package_;
    /// <summary>
    ///道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PlayerPackage Package {
      get { return package_; }
      set {
        package_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_PlayerJoinState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_PlayerJoinState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeNow, other.TimeNow)) return false;
      if (Gold != other.Gold) return false;
      if (!object.Equals(Package, other.Package)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID != 0L) hash ^= UserID.GetHashCode();
      if (TimeNow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeNow);
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (package_ != null) hash ^= Package.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserID);
      }
      if (TimeNow != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TimeNow);
      }
      if (Gold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gold);
      }
      if (package_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Package);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserID);
      }
      if (TimeNow != 0F) {
        size += 1 + 4;
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (package_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_PlayerJoinState other) {
      if (other == null) {
        return;
      }
      if (other.UserID != 0L) {
        UserID = other.UserID;
      }
      if (other.TimeNow != 0F) {
        TimeNow = other.TimeNow;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.package_ != null) {
        if (package_ == null) {
          Package = new global::Proto.PlayerPackage();
        }
        Package.MergeFrom(other.Package);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserID = input.ReadInt64();
            break;
          }
          case 21: {
            TimeNow = input.ReadFloat();
            break;
          }
          case 24: {
            Gold = input.ReadInt32();
            break;
          }
          case 34: {
            if (package_ == null) {
              Package = new global::Proto.PlayerPackage();
            }
            input.ReadMessage(Package);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_ReleaseMagic : pb::IMessage<Notify_ReleaseMagic> {
    private static readonly pb::MessageParser<Notify_ReleaseMagic> _parser = new pb::MessageParser<Notify_ReleaseMagic>(() => new Notify_ReleaseMagic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_ReleaseMagic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ReleaseMagic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ReleaseMagic(Notify_ReleaseMagic other) : this() {
      index_ = other.index_;
      cdCompletedTime_ = other.cdCompletedTime_;
      magicID_ = other.magicID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ReleaseMagic Clone() {
      return new Notify_ReleaseMagic(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "CdCompletedTime" field.</summary>
    public const int CdCompletedTimeFieldNumber = 2;
    private float cdCompletedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CdCompletedTime {
      get { return cdCompletedTime_; }
      set {
        cdCompletedTime_ = value;
      }
    }

    /// <summary>Field number for the "MagicID" field.</summary>
    public const int MagicIDFieldNumber = 3;
    private int magicID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicID {
      get { return magicID_; }
      set {
        magicID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_ReleaseMagic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_ReleaseMagic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CdCompletedTime, other.CdCompletedTime)) return false;
      if (MagicID != other.MagicID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (CdCompletedTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CdCompletedTime);
      if (MagicID != 0) hash ^= MagicID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (CdCompletedTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CdCompletedTime);
      }
      if (MagicID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MagicID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (CdCompletedTime != 0F) {
        size += 1 + 4;
      }
      if (MagicID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_ReleaseMagic other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.CdCompletedTime != 0F) {
        CdCompletedTime = other.CdCompletedTime;
      }
      if (other.MagicID != 0) {
        MagicID = other.MagicID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            CdCompletedTime = input.ReadFloat();
            break;
          }
          case 24: {
            MagicID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterAlpha : pb::IMessage<Notify_CharacterAlpha> {
    private static readonly pb::MessageParser<Notify_CharacterAlpha> _parser = new pb::MessageParser<Notify_CharacterAlpha>(() => new Notify_CharacterAlpha());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterAlpha> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MessageReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAlpha() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAlpha(Notify_CharacterAlpha other) : this() {
      index_ = other.index_;
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAlpha Clone() {
      return new Notify_CharacterAlpha(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Alpha" field.</summary>
    public const int AlphaFieldNumber = 2;
    private float alpha_;
    /// <summary>
    ///最终的Alpha
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterAlpha);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterAlpha other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterAlpha other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
